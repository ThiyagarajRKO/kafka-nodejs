<!-- @format -->

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BSE</title>

    <!-- Font Preloading -->
    <link
      rel="preload"
      href="/public/fonts/CassandraPersonalUse/CassandraPersonalUse-Regular.ttf"
      as="font"
      type="font/ttf"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="/public/fonts/CerebriSansPro/CerebriSansPro-Regular.ttf"
      as="font"
      type="font/ttf"
      crossorigin="anonymous"
    />

    <!-- title logo -->
    <link rel="icon" href="/public/images/group.png" type="image/icon type" />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css?v=2"
    />

    <!-- Bootstrap -->
    <link
      href="/public/plugins/bootstrap/css/bootstrap.min.css?v=2"
      rel="stylesheet"
    />
    <script src="/public/plugins/bootstrap/js/bootstrap.min.js?v=2"></script>

    <!-- MDB5  -->
    <link href="/public/plugins/mdb5/css/mdb.min.css?v=2" rel="stylesheet" />
    <script src="/public/plugins/mdb5/js/mdb.es.min.js?v=2"></script>

    <!-- jQuery -->
    <script src="/public/plugins/jquery/jquery.min.js?v=2"></script>

    <!-- Select2 -->
    <link
      rel="stylesheet"
      href="/public/plugins/select2/css/select2.min.css?v=2"
    />
    <script src="/public/plugins/select2/js/select2.min.js?v=2"></script>

    <!-- DataTable -->
    <link
      rel="stylesheet"
      href="/public/plugins/dataTables/datatables.min.css?v=2"
    />
    <script src="/public/plugins/dataTables/datatables.min.js?v=2"></script>
    <script src="/public/plugins/dataTables/dataTables.bootstrap5.min.js?v=2"></script>
    <!-- Responsive Datatable -->
    <link
      rel="stylesheet"
      href="/public/plugins/dataTables/datatables.responsive.min.css?v=2"
    />
    <script src="/public/plugins/dataTables/datatables.responsive.min.js?v=2"></script>

    <!-- Toast -->
    <link rel="stylesheet" href="/public/plugins/Toastr/toastr.min.css?v=2" />
    <script src="/public/plugins/Toastr/toastr.min.js?v=2"></script>

    <!-- perfect-scrollbar plugin -->
    <script src="/public/plugins/perfect-scrollbar/perfect-scrollbar.min.js?v=2"></script>

    <!-- Font Awesome -->
    <link
      rel="stylesheet"
      href="/public/plugins/font-awesome/css/all.min.css?v=2"
    />

    <!-- jQuery Confirm -->
    <link
      rel="stylesheet"
      href="/public/plugins/jquery-confirm/css/jquery-confirm.min.css?v=2"
    />
    <script src="/public/plugins/jquery-confirm/js/jquery-confirm.min.js?v=2"></script>

    <!-- Slide-in Panel -->
    <link
      rel="stylesheet"
      href="/public/plugins/slide-in-panel/css/slidePanel.min.css?v=2"
    />
    <script src="/public/plugins/slide-in-panel/js/slidePanel.min.js?v=2"></script>

    <!-- Tippy -->
    <link rel="stylesheet" href="/public/plugins/tippy/scale.css?v=2" />
    <script src="/public/plugins/tippy/popper.min.js?v=2"></script>
    <script src="/public/plugins/tippy/tippy-bundle.umd.min.js?v=2"></script>

    <!-- Popper -->
    <script src="/public/plugins/popper/popper.umd.min.js?v=2"></script>

    <!-- Canvas JS -->
    <script src="/public/plugins/canvasJs/canvasjs.min.js?v=2"></script>

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/public/css/style.css?v=2" />

    <!-- Custom Script -->
    <script src="/public/custom/App.js?v=2"></script>

    <style type="text/css">
      @font-face {
        font-family: "CassandraPersonalUse";
        src: url("/public/fonts/CassandraPersonalUse/CassandraPersonalUse-Regular.ttf?v=2")
          format("truetype");
      }

      @font-face {
        font-family: "CerebriSansPro-Regular";
        src: url("/public/fonts/CerebriSansPro/CerebriSansPro-Regular.ttf?v=2")
          format("truetype");
      }

      body {
        font-family: "CerebriSansPro-Regular";
        background-color: #f7f9fd;
        text-transform: none !important;
      }

      #closeVehiclePanelBtn,
      .panelClose {
        cursor: pointer;
      }

      .toast {
        opacity: 1 !important;
      }

      .show-dot {
        display: none !important;
      }

      #lastMenu {
        border-right: 0px solid #414a57;
      }

      .btn {
        text-transform: none;
      }

      .bg-danger,
      .btn-red {
        background-color: #e8763e !important;
        text-transform: none;
      }

      .procurementSpendBtn.btn-danger {
        background-color: rgba(31, 45, 62, 0.8);
        text-transform: none;
      }

      .procurementSpendBtn.btn-danger:hover {
        background-color: rgba(31, 45, 62, 0.8);
        text-transform: none;
      }

      .procurementSpendBtn.btn-outline-danger {
        border-color: rgba(31, 45, 62, 0.8) !important;
        color: rgba(31, 45, 62, 0.8) !important;
        text-transform: none;
        box-shadow: none !important;
        /* --webkit-background-clip: padding-box;
        background-clip: padding-box; */
      }

      .procurementSpendBtn.btn-outline-danger:hover {
        border-color: rgba(31, 45, 62, 0.8) !important;
        color: rgba(31, 45, 62, 0.8) !important;
        /* -webkit-background-clip: padding-box;
        background-clip: padding-box; */
      }

      .topMenu-item {
        display: block;
        text-align: center;
        text-decoration: none;
        width: 100px;
        cursor: pointer;
      }

      .topMenu-item:hover:not(.topMenu-item-active) {
        /* border-bottom: 1px solid #ea5455; */
        color: #ea5455 !important;
        /* font-weight: bold; */
        transition: right 0.3s ease;
        cursor: pointer;
      }

      .topMenu-item-active {
        /* border-bottom: 1px solid #ea5455; */
        color: #ea5455 !important;
        /* background-color: #f07b3f; */
        /* border-radius: 8px; */
        transition: right 0.3s ease;
        /* font-weight: bold; */
      }

      .topMenu-item-active .icon-button {
        /* border-bottom: 1px solid #ea5455; */
        background-color: #ea5455 !important;
        color: white;

        /* background-color: #f07b3f; */
        /* border-radius: 8px; */
        transition: right 0.3s ease;
        /* font-weight: bold; */
      }

      .topMenu-item-active .icon-label {
        font-weight: 600;
      }

      .tippy-box[data-theme~="tomato"] {
        background-color: #4f4f4f;
        color: white;
      }

      .edit,
      .view,
      .close,
      .del {
        cursor: pointer;
      }

      .slideInPanel {
        z-index: 9999;
        position: fixed;
        top: 0;
        bottom: 0;
        right: -600px;
        width: 400px;
        background-color: rgba(31, 45, 62);
        color: #e3e3e3;
        height: 90vh;
        /* box-shadow: 0 0 0px rgba(0, 0, 0, 0.2); */
        transition: right 0.3s ease;
        border-radius: 8px;
      }

      /* Input */
      .slideInPanel input {
        background-color: transparent !important;
        border-color: rgba(98, 114, 147, 0.6);
        color: white;
      }

      .slideInPanel input::webkit-calen .slideInPanel input:focus {
        background-color: transparent !important;
        color: white;
      }

      .slideInPanel input:hover {
        background-color: transparent !important;
        border-color: #627293;
        color: white;
      }

      /* Select */
      .slideInPanel .select2-container {
        background-color: transparent !important;
        border-color: rgba(98, 114, 147, 0.6) !important;
        color: 627293 !important;
      }

      .select2-container {
        width: 100% !important;
      }

      .select2-selection__rendered,
      .select2-selection__clear,
      .select2-selection__arrow {
        color: white !important;
        margin-top: 0.25rem !important;
      }

      .slideInPanel .select:focus {
        background-color: transparent !important;
        border-color: #627293;
      }

      .slideInPanel .select2-container:hover {
        border-color: #627293;
      }

      /* TextArea */
      .slideInPanel textarea {
        background-color: transparent !important;
        border-color: rgba(98, 114, 147, 0.6);
      }

      .slideInPanel textarea:focus {
        background-color: transparent !important;
      }

      .slideInPanel textarea:hover {
        border-color: rgba(98, 114, 147, 0.6);
      }

      Form Control .slideInPanel .form-control {
        color: #f7f9fc;
      }

      .slideInPanel .form-control::placeholder {
        color: #627293;
      }

      .select2-selection::placeholder {
        color: #627293;
      }

      .page-item.active .page-link {
        color: #fff !important;
        background-color: #ea5455 !important;
        border-color: #ea5455 !important;
      }

      .page-link {
        color: #000 !important;
        background-color: #fff !important;
        border: 1px solid #dee2e6 !important;
      }

      .page-link:hover {
        color: #fff !important;
        background-color: #f17979 !important;
        border-color: #ea5455 !important;
      }

      .select2-selection {
        background-color: transparent !important;
        border-color: rgba(98, 114, 147, 0.6) !important;
        height: 35px !important;
      }

      .select2-dropdown {
        z-index: 10000 !important;
      }

      table.dataTable th {
        text-align: left !important;
      }

      fieldset {
        border-color: rgba(129, 145, 179, 0.6) !important;
        border-radius: 4px;
      }

      legend {
        margin-top: -1.7rem !important;
        background-color: #e0e0e0;
        color: #1f2d3e;
        border-radius: 4px;
        font-size: inherit !important;
      }

      #appendOutput:hover {
        background-color: rgb(135, 49, 177);
        background-color: linear-gradient(
          90deg,
          rgba(135, 49, 177, 1) 1%,
          rgba(191, 24, 188, 1) 35%,
          rgba(209, 52, 174, 1) 68%,
          rgba(217, 29, 115, 1) 100%
        );
        color: white;
      }

      /*
      #appendOutput {
        color: rgba(98, 114, 147, 0.6) !important;
      } */

      .st-theme-brick > .nav .nav-link.active {
        background-color: #dc4c64 !important;
      }

      .st-theme-brick > .nav .nav-link {
        color: #dc4c64 !important;
      }

      .st-theme-brick > .nav {
        border-color: #dc4c64 !important;
      }

      .vl {
        border-left: 2px dashed rgba(98, 114, 147, 0.6);
        height: 25px;
        position: absolute;
        left: 50%;
        margin-left: -3px;
        /* bottom: -10; */
      }

      .vl-top {
        border-left: 2px dashed rgba(98, 114, 147, 0.6);
        height: 35px;
        position: absolute;
        left: 50%;
        margin-left: -3px;
        /* bottom: -10; */
      }

      .tippy-box {
        /* background-color: white !important; */
        max-width: 100% !important;
        /* box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.175); */
      }

      .canvasjs-chart-credit {
        display: none;
      }

      .icon-button {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 50px;
        background-color: white;
        /* border: 2px solid #ddd; */
        border-radius: 50%;
        /* box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); */
        text-decoration: none;
        color: #333;
        transition:
          background-color 0.3s,
          color 0.3s,
          box-shadow 0.3s;
      }

      .icon-button i {
        font-size: 12px;
      }

      .icon-label {
        font-size: 14px;
        /* font-weight: 600; */
      }

      /* Styles for mobile screens */
      @media screen and (max-width: 480px) {
        .dashboardCard {
          width: 100%;
        }

        .chartBtnTxt {
          display: none;
        }

        .chartBtnIcn {
          display: block;
        }
      }

      /* Styles for iPads, tablets */
      @media screen and (min-width: 481px) and (max-width: 768px) {
        .dashboardCard {
          width: 100%;
        }

        .chartBtnTxt {
          display: none;
        }

        .chartBtnIcn {
          display: block;
        }
      }

      /* Styles for Small screens, laptops */
      @media screen and (min-width: 769px) and (max-width: 1024px) {
        .dashboardCard {
          width: 100%;
        }

        .chartBtnTxt {
          display: block;
        }

        .chartBtnIcn {
          display: none;
        }
      }

      /* Styles for Desktops, large screens */
      @media screen and (min-width: 1025px) and (max-width: 1200px) {
        .dashboardCard {
          width: 49.5%;
        }

        .chartBtnTxt {
          display: block;
        }

        .chartBtnIcn {
          display: none;
        }
      }

      /* Styles for extra large screens */
      @media screen and (min-width: 1201px) {
        .dashboardCard {
          width: 49.5%;
        }

        .chartBtnTxt {
          display: block;
        }

        .chartBtnIcn {
          display: none;
        }
      }
    </style>
  </head>

  <body>
    <div class="container-fluid">
      <div class="row d-flex justify-content-center">
        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <!-- ------------------------------------------ Dashboard Container ---------------------------------------------- -->
        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <div class="menu-container dashboardContainer">
          <div class="row d-flex justify-content-between">
            <div class="dashboardCard mt-3 border rounded pt-4 px-4">
              <div class="dashboardCard-Header d-flex justify-content-between">
                <span class="fw-bold">Supplier Performance Scorecard</span>
                <div class="btn-group btn-group-sm">
                  <div
                    class="btn btn-danger procurementSpendBtn priceWisePerformanceFilter"
                    data-bs-toggle="tooltip"
                    data-bs-placement="bottom"
                    title="Date-wise Procurement Spent"
                  >
                    <span class="chartBtnTxt">Get Price</span>
                    <i class="fa-solid fa-money-check-dollar chartBtnIcn"></i>
                  </div>
                  <div
                    class="btn btn-outline-danger procurementSpendBtn quantityWisePerformanceFilter"
                    data-bs-toggle="tooltip"
                    data-bs-placement="bottom"
                    title="Date-wise Procured Quantity"
                  >
                    <span class="chartBtnTxt">Quantity</span>
                    <i
                      class="fa-solid fa-scale-unbalanced-flip chartBtnIcn"
                    ></i>
                  </div>
                </div>
                <select
                  id="supplierPerformanceScorecardChartFilter"
                  class="form-select form-select-sm me-2"
                  style="
                    height: 28px !important;
                    padding-top: 5px;
                    right: 0;
                    width: 7rem;
                  "
                >
                  <option value="7" selected>7 days</option>
                  <option value="30">30 days</option>
                  <option value="90">3 months</option>
                  <option value="180">6 months</option>
                  <!-- <option value="Date Range">Custom Range</option> -->
                </select>
              </div>
              <div class="dashboardCard-Body py-4" style="height: 50vh">
                <div
                  id="supplierPerformanceScorecardChart"
                  style="height: 100%"
                ></div>
              </div>
            </div>

            <div class="dashboardCard mt-3 border rounded pt-4 px-4">
              <div class="dashboardCard-Header d-flex justify-content-between">
                <span class="fw-bold">Product Ageing Analysis</span>
                <select
                  id="procurementAgeByProductsFilter"
                  class="form-select form-select-sm me-2"
                  style="
                    height: 28px !important;
                    padding-top: 5px;
                    right: 0;
                    width: 7rem;
                  "
                >
                  <option value="7" selected>7 days</option>
                  <option value="30">30 days</option>
                  <option value="90">3 months</option>
                  <option value="180">6 months</option>
                  <!-- <option value="Date Range">Custom Range</option> -->
                </select>
              </div>
              <div class="dashboardCard-Body py-4" style="height: 50vh">
                <div
                  id="procurementAgeByProductsChart"
                  style="height: 100%"
                ></div>
              </div>
            </div>

            <div class="dashboardCard mt-3 border rounded pt-4 px-4">
              <div class="dashboardCard-Header d-flex justify-content-between">
                <span class="fw-bold">Procurement Analysis</span>
                <div class="btn-group btn-group-sm">
                  <div
                    class="btn btn-danger procurementSpendBtn spendByDateFilter"
                    data-bs-toggle="tooltip"
                    data-bs-placement="bottom"
                    title="Date-wise Procurement Spent"
                  >
                    <span class="chartBtnTxt">Get Price</span>
                    <i class="fa-solid fa-money-check-dollar chartBtnIcn"></i>
                  </div>
                  <div
                    class="btn btn-outline-danger procurementSpendBtn quantityByDateFilter"
                    data-bs-toggle="tooltip"
                    data-bs-placement="bottom"
                    title="Date-wise Procured Quantity"
                  >
                    <span class="chartBtnTxt">Quantity</span>
                    <i
                      class="fa-solid fa-scale-unbalanced-flip chartBtnIcn"
                    ></i>
                  </div>
                </div>
                <select
                  id="procurementAnalysisByDateChartFilter"
                  class="form-select form-select-sm me-2"
                  style="
                    height: 28px !important;
                    padding-top: 5px;
                    right: 0;
                    width: 7rem;
                  "
                >
                  <option value="7" selected>7 days</option>
                  <option value="30">30 days</option>
                  <option value="90">3 months</option>
                  <option value="180">6 months</option>
                  <!-- <option value="Date Range">Custom Range</option> -->
                </select>
              </div>
              <div class="dashboardCard-Body py-4" style="height: 50vh">
                <div
                  id="procurementAnalysisByDateChart"
                  style="height: 100%"
                ></div>
              </div>
            </div>

            <div class="dashboardCard mt-3 border rounded pt-4 px-4">
              <div class="dashboardCard-Header d-flex justify-content-between">
                <span class="fw-bold">Procurement Spend</span>
                <div class="btn-group btn-group-sm">
                  <div
                    class="btn btn-danger procurementSpendBtn supplierFilter"
                    data-bs-toggle="tooltip"
                    data-bs-placement="bottom"
                    title="Supplier-wise Procurement Spend"
                  >
                    <span class="chartBtnTxt">Supplier</span>
                    <i class="fa-solid fa-users chartBtnIcn"></i>
                  </div>
                  <div
                    class="btn btn-outline-danger procurementSpendBtn productFilter"
                    data-bs-toggle="tooltip"
                    data-bs-placement="bottom"
                    title="Product-wise Procurement Spend"
                  >
                    <span class="chartBtnTxt">Product</span>
                    <i class="fa-solid fa-box-open chartBtnIcn"></i>
                  </div>
                </div>
                <select
                  id="procurementSpendChartFilter"
                  class="form-select form-select-sm me-2"
                  style="
                    height: 28px !important;
                    padding-top: 5px;
                    right: 0;
                    width: 7rem;
                  "
                >
                  <option value="7" selected>7 days</option>
                  <option value="30">30 days</option>
                  <option value="90">3 months</option>
                  <option value="180">6 months</option>
                  <!-- <option value="Date Range">Custom Range</option> -->
                </select>
              </div>
              <div class="dashboardCard-Body py-4" style="height: 50vh">
                <div id="procurementSpend" style="height: 100%"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Dashboard Ends -->

        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <!-- ------------------------------------------ Purchases Container ---------------------------------------------- -->
        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <div class="menu-container procurementContainer d-none">
          <!-- Slide-in Panel -->
          <div
            id="procurementSlideInPanel"
            class="slideInPanel px-4 overflow-auto"
          >
            <div class="row d-flex justify-content-center">
              <div class="col-sm-12 col-md-12 col-md-12">
                <div class="text-center mt-4 d-flex justify-content-between">
                  <span id="procurementPanelHeading" class="fw-bold"
                    >Add Procurement Data</span
                  >
                  <div class="col my-auto d-flex justify-content-end">
                    <i
                      class="fa-solid fa-circle-xmark my-auto panelClose"
                      id="closeProcurementPanelBtn"
                    ></i>
                  </div>
                </div>
                <hr />
                <div>
                  <div class="form-group my-2">
                    <label for="procurement_date">Date of Purchase</label>
                    <input
                      type="date"
                      class="form-control"
                      id="procurement_date"
                      name="procurementDate"
                      required
                    />
                  </div>

                  <div class="form-group my-2">
                    <label for="procurement_unit">Purchase Source</label>
                    <select
                      id="procurement_unit"
                      class="form-control input-dropdown w-100"
                      name="procurement_unit"
                      required
                    ></select>
                  </div>
                  <div class="form-group my-2">
                    <label for="procurement_product_type">Product Type</label>
                    <select
                      id="procurement_product_type"
                      class="form-control input-dropdown w-100"
                      name="procurementProductType"
                      required
                    ></select>
                  </div>
                  <div class="form-group my-2">
                    <label for="procurement_product">Product</label>
                    <select
                      id="procurement_product"
                      class="form-control input-dropdown w-100"
                      name="procurementProduct"
                      required
                    ></select>
                  </div>
                  <div class="form-group my-2">
                    <label for="procurement_quantity"> Quantity (kg)</label>
                    <input
                      id="procurement_quantity"
                      maxlength="10"
                      class="form-control"
                      placeholder="eg. 24"
                      type="number"
                      name="procurementQuantity"
                    />
                  </div>
                  <div class="form-group my-2">
                    <label for="procurement_price">Price per KG</label>
                    <input
                      id="procurement_price"
                      maxlength="10"
                      class="form-control"
                      placeholder="eg. 24"
                      type="number"
                      name="procurement_price"
                    />
                  </div>
                  <div class="form-group my-3">
                    <label for="procurement_product_supplier"
                      >Supplier Name</label
                    >
                    <select
                      id="procurement_product_supplier"
                      class="form-control input-dropdown w-100"
                      name="procurementProductSupplier"
                      required
                    ></select>
                  </div>
                  <div class="form-group my-2">
                    <label for="procurement_purchaser">Purchaser</label>
                    <input
                      id="procurement_purchaser"
                      class="form-control"
                      placeholder="eg. Smith"
                      type="text"
                      name="procurementPurchaser"
                    />
                  </div>
                  <div class="d-flex justify-content-between mt-4 py-3 pb-4">
                    <div id="submitPurchases" class="col-lg-5 btn btn-danger">
                      Save
                    </div>
                    <div
                      id="resetProcurementDataBtn"
                      class="col-lg-5 btn btn-outline-danger"
                    >
                      Clear
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <!-- Table Content -->
          <div class="rounded-2 d-flex justify-content-center mt-4 py-4">
            <div class="border p-4 w-100">
              <!-- Add Button -->
              <div class="d-flex rounded-2 justify-content-end pb-4">
                <div
                  id="openProcurementPanelBtn"
                  class="btn btn-outline-danger d-flex justify-content-around"
                  style="width: 100px"
                >
                  <i class="fa-solid fa-circle-plus my-auto"></i>
                  <span style="margin-top: 4px" class="fw-bold my-auto"
                    >Add</span
                  >
                </div>
              </div>
              <table
                id="procurementTable"
                class="table table-hover nowrap w-100"
              >
                <thead>
                  <tr>
                    <th></th>
                    <th class="fw-bold"><span>Purchase Date</span></th>
                    <th class="fw-bold"><span>Lot no</span></th>
                    <th class="fw-bold"><span>Total Product Items</span></th>
                    <th class="fw-bold">
                      <span>Total Purchased Quantity</span>
                    </th>
                    <th class="fw-bold"><span>Total Purchased Price</span></th>
                  </tr>
                </thead>
              </table>
            </div>
          </div>
        </div>

        <!-- modal-dialog-centered modal-dialog-scrollable -->
        <!-- Modal -->
        <div
          id="procurementProductModal"
          class="modal hide fade"
          role="dialog"
          aria-labelledby="myModalLabel"
          data-keyboard="false"
          data-backdrop="static"
        >
          <div class="modal-dialog modal-xl">
            <!-- Modal content-->
            <div class="modal-content">
              <div class="modal-header">
                <h4 class="modal-title">Procurement Products</h4>
                <i class="close fa-solid fa-circle-xmark" data-dismiss="modal">
                </i>
              </div>
              <div class="modal-body">
                <div class="d-flex justify-content-between">
                  <div class="form-group">
                    <label class="fw-bold" for="lot_no">Lot No:</label>
                    <span id="view_lot_no"></span>
                  </div>

                  <div class="form-group">
                    <label class="fw-bold" for="total_products"
                      >Total Products:</label
                    >
                    <span id="view_total_products"></span>
                  </div>

                  <div class="form-group">
                    <label class="fw-bold" for="total_weight"
                      >Total Weight:</label
                    >
                    <span id="view_total_weight"></span>
                  </div>
                </div>

                <hr class="mb-4" />

                <table
                  id="procurementProductTable"
                  class="rounded table table-hover nowrap w-100"
                >
                  <thead>
                    <tr>
                      <th style="border-radius: 4px 0 0 0"></th>
                      <th style="border-radius: 4px 0 0 0"></th>
                      <th class="fw-bold"><span>Product Name</span></th>
                      <th class="fw-bold">
                        <span>Purchased Type</span>
                      </th>
                      <th class="fw-bold">
                        <span>Purchased Quantity</span>
                      </th>
                      <th class="fw-bold">
                        <span>Price per KG</span>
                      </th>
                      <th class="fw-bold">
                        <span>Total Amount</span>
                      </th>
                      <th class="fw-bold">
                        <span>Supplier Name</span>
                      </th>
                      <th class="fw-bold">
                        <span>Purchaser</span>
                      </th>
                      <th class="fw-bold">
                        <span>Payment Status</span>
                      </th>
                    </tr>
                  </thead>
                </table>
              </div>
              <div class="modal-footer">
                <button
                  type="button"
                  class="close btn btn-danger"
                  data-dismiss="modal"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
        <!-- Purchases Container Ends -->

        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <!-- ------------------------------------------ Supplier Container ----------------------------------------------- -->
        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <div class="menu-container supplierContainer d-none">
          <!-- Table Content -->
          <div class="rounded-2 d-flex justify-content-center mt-4 py-4">
            <div class="border p-4 w-100">
              <table id="supplierTable" class="table table-hover nowrap w-100">
                <thead>
                  <tr>
                    <th class="fw-bold"><span>Supplier ID</span></th>
                    <th class="fw-bold"><span>Supplier Name</span></th>
                    <th class="fw-bold"><span>Email</span></th>
                    <th class="fw-bold">
                      <span>Phone</span>
                    </th>
                    <th class="fw-bold"><span>Address</span></th>
                    <th class="fw-bold">
                      <span>Last Order On</span>
                    </th>
                    <th class="fw-bold">
                      <span>Last Order Status</span>
                    </th>
                    <th class="fw-bold">
                      <span>Total Orders</span>
                    </th>
                    <th class="fw-bold">
                      <span>Total Paid</span>
                    </th>
                    <th class="fw-bold">
                      <span>Due Amount</span>
                    </th>
                    <th class="fw-bold">
                      <span>Purchase History</span>
                    </th>
                  </tr>
                </thead>
              </table>
            </div>
          </div>
        </div>

        <!-- modal-dialog-centered modal-dialog-scrollable -->
        <!-- Modal -->
        <div
          id="supplierProductModal"
          class="modal hide fade"
          role="dialog"
          aria-labelledby="myModalLabel"
          data-keyboard="false"
          data-backdrop="static"
        >
          <div class="modal-dialog modal-xl">
            <!-- Modal content-->
            <div class="modal-content">
              <div class="modal-header">
                <h4 class="modal-title">Purchased Products</h4>
                <i class="close fa-solid fa-circle-xmark" data-dismiss="modal">
                </i>
              </div>
              <div class="modal-body">
                <div id="orderDataContainer">
                  <fieldset
                    class="form-group border p-3"
                    style="border-color: rgba(129, 145, 179, 0.6) !important"
                  >
                    <legend class="w-auto px-2">Supplier</legend>
                    <!-- 1st row -->
                    <div class="d-flex justify-content-between">
                      <table class="col">
                        <tr>
                          <th class="align-top">ID</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_supplier_master_id"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Name</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_supplier_name"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Country</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_supplier_address"></span>
                          </td>
                        </tr>
                      </table>

                      <table class="col">
                        <tr>
                          <th class="align-top">Email</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_supplier_email"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Phone</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_supplier_phone"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Rating</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_supplier_rating"></span>
                          </td>
                        </tr>
                      </table>
                    </div>
                  </fieldset>
                </div>

                <div>
                  <fieldset
                    class="form-group border p-3 mt-3"
                    style="border-color: rgba(129, 145, 179, 0.6) !important"
                  >
                    <legend class="w-auto px-2">Orders</legend>
                    <table
                      id="supplierProductTable"
                      class="rounded table table-hover nowrap w-100"
                    >
                      <thead>
                        <tr>
                          <th class="fw-bold">Lot No</th>
                          <th class="fw-bold">Order Date</th>
                          <th class="fw-bold"><span>Product Name</span></th>
                          <th class="fw-bold">
                            <span>Purchased Type</span>
                          </th>
                          <th class="fw-bold">
                            <span>Purchased Quantity</span>
                          </th>
                          <th class="fw-bold">
                            <span>Price per KG</span>
                          </th>
                          <th class="fw-bold">
                            <span>Total Amount</span>
                          </th>
                          <th class="fw-bold">
                            <span>Purchaser</span>
                          </th>
                        </tr>
                      </thead>
                    </table>
                  </fieldset>
                </div>
              </div>
              <div class="modal-footer">
                <button
                  type="button"
                  class="close btn btn-danger"
                  data-dismiss="modal"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
        <!-- Supplier Container Ends -->

        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <!-- ------------------------------------------ Adjustment Container --------------------------------------------- -->
        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <div class="menu-container adjustmentContainer d-none">
          <!-- Table Content -->
          <div class="rounded-2 d-flex justify-content-center mt-4 py-4">
            <div class="border p-4 w-100">
              <table
                id="adjustmentTable"
                class="table table-hover nowrap w-100"
              >
                <thead>
                  <tr>
                    <th class="fw-bold"><span>Lot No</span></th>
                    <th class="fw-bold"><span>Product</span></th>
                    <th class="fw-bold"><span>Actual Quantity(kgs)</span></th>
                    <th class="fw-bold"><span>Adjusted Quantity(kgs)</span></th>
                    <th class="fw-bold"><span>Actual Price (USD)</span></th>
                    <th class="fw-bold"><span>Adjusted Price (USD)</span></th>
                    <th class="fw-bold"><span>Reason for Adjustment</span></th>
                    <th class="fw-bold"><span>Surveyor</span></th>
                    <th class="fw-bold"><span>Created At</span></th>
                  </tr>
                </thead>
              </table>
            </div>
          </div>
        </div>
        <!-- Adjustment Container Ends -->

        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <!-- -------------------------------------------- Payment Container ---------------------------------------------- -->
        <!-- ------------------------------------------------------------------------------------------------------------- -->
        <div class="menu-container paymentContainer d-none">
          <!-- Slide-in Panel -->
          <div id="paymentSlideInPanel" class="slideInPanel px-4 overflow-auto">
            <div class="row d-flex justify-content-center">
              <div class="col-sm-12 col-md-12 col-md-12">
                <div class="text-center mt-4 d-flex justify-content-between">
                  <span id="paymentPanelHeading" class="fw-bold"
                    >Add Payment Data</span
                  >
                  <div class="col my-auto d-flex justify-content-end">
                    <i
                      class="fa-solid fa-circle-xmark my-auto panelClose"
                      id="closePaymentPanelBtn"
                    ></i>
                  </div>
                </div>

                <hr />

                <div>
                  <div class="form-group my-2">
                    <label for="lot_no">Payment Date</label>
                    <input
                      id="payment_date"
                      class="form-control"
                      type="datetime-local"
                      placeholder="eg. 10"
                      name="payment_date"
                      required
                    />
                  </div>

                  <div class="form-group my-2">
                    <label for="lot_no">Supplier</label>
                    <select
                      class="form-control input-dropdown w-100"
                      id="paymentSupplierNames"
                      name="paymentSupplierNames"
                    ></select>
                  </div>

                  <div class="form-group my-2">
                    <label for="lot_no">Lot No</label>
                    <select
                      class="form-control input-dropdown w-100"
                      id="paymentLotNo"
                      name="paymentLotNo"
                    ></select>
                  </div>

                  <div class="form-group my-2">
                    <label for="lot_no">Transaction ID</label>
                    <input
                      id="transaction_id"
                      class="form-control"
                      type="text"
                      placeholder="eg. TNSDKH89698698"
                      name="transaction_id"
                      required
                    />
                  </div>

                  <div class="form-group my-2">
                    <label for="s">Payment Methods</label>
                    <select
                      class="form-control input-dropdown w-100"
                      id="paymentMethods"
                      name="paymentMethods"
                    ></select>
                  </div>

                  <div class="form-group my-2">
                    <label for="discount">Discount</label>
                    <input
                      id="payment_discount"
                      class="form-control"
                      type="number"
                      placeholder="eg. 100"
                      name="payment_discount"
                      required
                    />
                  </div>

                  <div class="form-group my-2">
                    <label for="totalPaid">Total Paid</label>
                    <input
                      id="total_paid"
                      class="form-control"
                      type="number"
                      placeholder="eg. 10000"
                      name="total_paid"
                      required
                    />
                    <span style="font-size: 12px">
                      <span id="total_amount_paid">Total Price :</span>
                      <span class="fw-bold" id="total_payment_amount"
                        >0</span
                      ></span
                    >
                  </div>

                  <div class="form-group my-2">
                    <label for="penalty">Penalty</label>
                    <input
                      id="penalty"
                      class="form-control"
                      type="number"
                      placeholder="eg. 1000"
                      name="penalty"
                      required
                    />
                  </div>

                  <div class="form-group my-2">
                    <label for="totalPaid">Tax Amount</label>
                    <input
                      id="tax_amount"
                      class="form-control"
                      type="number"
                      placeholder="eg. 100"
                      name="tax_amount"
                      required
                    />
                  </div>

                  <div class="total mt-3">
                    <table>
                      <tr>
                        <td>Net Amount&nbsp;</td>
                        <td>:</td>
                        <td>
                          &nbsp;
                          <span id="net_amount">0.00</span>
                        </td>
                      </tr>
                      <tr>
                        <td>Due Amount&nbsp;</td>
                        <td>:</td>
                        <td>
                          &nbsp;
                          <span id="due_amount">0.00</span>
                        </td>
                      </tr>
                    </table>
                  </div>

                  <div class="d-flex justify-content-between mt-3 pb-4">
                    <div id="submitPayment" class="col-lg-5 btn btn-danger">
                      Save
                    </div>
                    <div
                      id="resetPaymentDataBtn"
                      class="col-lg-5 btn btn-outline-danger"
                    >
                      Clear
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <!-- Table Content -->
          <div class="rounded-2 d-flex justify-content-center mt-4 py-4">
            <div class="border p-4 w-100">
              <!-- Add Button -->
              <div class="d-flex rounded-2 justify-content-end pb-4">
                <div
                  id="openPaymentPanelBtn"
                  class="btn btn-outline-danger d-flex justify-content-around"
                  style="width: 100px"
                >
                  <i class="fa-solid fa-circle-plus my-auto"></i>
                  <span style="margin-top: 4px" class="fw-bold my-auto"
                    >Add</span
                  >
                </div>
              </div>
              <table id="paymentTable" class="table table-hover nowrap w-100">
                <thead>
                  <tr>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th class="fw-bold"><span>Transaction ID</span></th>
                    <th class="fw-bold"><span>Payment Date</span></th>
                    <th class="fw-bold"><span>Supplier</span></th>
                    <th class="fw-bold"><span>Lot No</span></th>
                    <th class="fw-bold"><span>Total Products</span></th>
                    <th class="fw-bold"><span>Payment Method</span></th>
                    <th class="fw-bold"><span>Total Amount</span></th>
                    <th class="fw-bold"><span>Total Paid</span></th>
                    <th class="fw-bold"><span>Due amount</span></th>
                    <th class="fw-bold"><span>Discount</span></th>
                    <th class="fw-bold"><span>Penalty</span></th>
                    <th class="fw-bold"><span>Tax Paid</span></th>
                    <th class="fw-bold"><span>Net Amount</span></th>
                  </tr>
                </thead>
              </table>
            </div>
          </div>
        </div>

        <!-- modal-dialog-centered modal-dialog-scrollable -->
        <!-- Modal -->
        <div
          id="paymentProductModal"
          class="modal hide fade"
          role="dialog"
          aria-labelledby="myModalLabel"
          data-keyboard="false"
          data-backdrop="static"
        >
          <div class="modal-dialog modal-xl">
            <!-- Modal content-->
            <div class="modal-content">
              <div class="modal-header">
                <h4 class="modal-title">Payment Products</h4>
                <i class="close fa-solid fa-circle-xmark" data-dismiss="modal">
                </i>
              </div>
              <div class="modal-body">
                <div id="supplierDataContainer">
                  <fieldset
                    class="form-group border p-3"
                    style="border-color: rgba(129, 145, 179, 0.6) !important"
                  >
                    <legend class="w-auto px-2">Supplier</legend>
                    <!-- 1st row -->
                    <div class="d-flex justify-content-between">
                      <table class="col">
                        <tr>
                          <th class="align-top">ID</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_supplier_master_id"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Name</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_supplier_name"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Country</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_supplier_address"></span>
                          </td>
                        </tr>
                      </table>

                      <table class="col">
                        <tr>
                          <th class="align-top">Email</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_supplier_email"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Phone</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_supplier_phone"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Rating</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_supplier_rating"></span>
                          </td>
                        </tr>
                      </table>
                    </div>
                  </fieldset>
                </div>

                <div id="purchaseOrderDataContainer">
                  <fieldset
                    class="form-group border p-3 mt-3"
                    style="border-color: rgba(129, 145, 179, 0.6) !important"
                  >
                    <legend class="w-auto px-2">Purchase Order</legend>
                    <!-- 1st row -->
                    <div class="d-flex justify-content-between">
                      <table class="col">
                        <tr>
                          <th class="align-top">ID</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_purchase_order_id"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Lot No</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_lot_no"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Purchased Date</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_purchase_date"></span>
                          </td>
                        </tr>
                      </table>

                      <table class="col">
                        <tr>
                          <th class="align-top">Total Products</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_total_products"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Purchased Quantity</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_total_quantity"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Total Amount</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_total_amount"></span>
                          </td>
                        </tr>
                      </table>
                    </div>
                  </fieldset>
                </div>

                <div>
                  <fieldset
                    class="form-group border p-3 mt-3"
                    style="border-color: rgba(129, 145, 179, 0.6) !important"
                  >
                    <legend class="w-auto px-2">Products</legend>
                    <table
                      id="paymentProductTable"
                      class="rounded table table-hover nowrap w-100"
                    >
                      <thead>
                        <tr>
                          <th class="fw-bold"><span>Purchase Date</span></th>
                          <th class="fw-bold"><span>Product Name</span></th>
                          <th class="fw-bold">
                            <span>Purchased Type</span>
                          </th>
                          <th class="fw-bold">
                            <span>Purchased Quantity</span>
                          </th>
                          <th class="fw-bold">
                            <span>Price per KG</span>
                          </th>
                          <th class="fw-bold">
                            <span>Total Amount</span>
                          </th>
                          <th class="fw-bold">
                            <span>Purchaser</span>
                          </th>
                        </tr>
                      </thead>
                    </table>
                  </fieldset>
                </div>

                <div id="amountDataContainer">
                  <fieldset
                    class="form-group border p-3 mt-3"
                    style="border-color: rgba(129, 145, 179, 0.6) !important"
                  >
                    <legend class="w-auto px-2">Payment Details</legend>
                    <!-- 1st row -->
                    <div class="d-flex justify-content-between">
                      <table class="col">
                        <tr>
                          <th class="align-top">ID</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_supplier_payment_id"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Transaction ID</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_transaction_id"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Payment Method</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_method"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Total Paid</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_total_paid"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Due Amount</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_due_amount"></span>
                          </td>
                        </tr>
                      </table>

                      <table class="col">
                        <tr>
                          <th class="align-top">Payment Date</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_payment_date"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Tax Paid</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_tax_paid"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Penalty</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_penalty"></span>
                          </td>
                        </tr>

                        <tr>
                          <th class="align-top">Discount</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_discount"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Net Amount</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_net_amount"></span>
                          </td>
                        </tr>
                      </table>
                    </div>
                  </fieldset>
                </div>

                <!-- <div id="qualityDataContainer">
                  <fieldset
                    class="form-group border p-3 mt-3"
                    style="border-color: rgba(129, 145, 179, 0.6) !important"
                  >
                    <legend class="w-auto px-2">Quality Control</legend>
                    <div class="d-flex justify-content-between">
                      <table class="col">
                        <tr>
                          <th class="align-top">Quantity Status</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_quality_status"></span>
                          </td>
                        </tr>
                        <tr>
                          <th class="align-top">Adjusted Quantity</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_adjusted_quantity"></span>
                          </td>
                        </tr>
                      </table>

                      <table class="col">
                        <tr>
                          <th class="align-top">Adjusted Price</th>
                          <td class="align-top">:</td>
                          <td class="align-top">
                            <span id="view_adjusted_price"></span>
                          </td>
                        </tr>
                      </table>
                    </div>
                  </fieldset>
                </div> -->
              </div>
              <div class="modal-footer">
                <button
                  type="button"
                  class="close btn btn-danger"
                  data-dismiss="modal"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
        <!-- Payment Container Ends -->
      </div>
    </div>
  </body>

  <script type="text/javascript">
    jQuery(document).ready(function ($) {
      // Declarations
      App.checkAccess();
      let view_purchase_payment_id = "";
      let selected_proc_product_id = "";
      let selected_proc_product_name = "";
      let selected_proc_supplier_id = "";
      let selected_proc_supplier_name = "";
      let selected_payment_supplier_id = "";
      let selected_payment_supplier_name = "";
      let selected_payment_lot_id = "";
      let selected_payment_lot_no = "";

      var tooltipTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="tooltip"]')
      );
      var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
      });

      new PerfectScrollbar(".slideInPanel", {
        suppressScrollX: true,
      }).update();

      toastr.options = {
        closeButton: false,
        debug: false,
        newestOnTop: true,
        progressBar: true,
        positionClass: "toast-top-right",
        preventDuplicates: false,
        onclick: null,
        showDuration: "300",
        hideDuration: "1000",
        timeOut: "5000",
        extendedTimeOut: "1000",
        showEasing: "swing",
        hideEasing: "linear",
        showMethod: "fadeIn",
        hideMethod: "fadeOut",
      };

      // Menu navigation
      $(".topMenu-item").click(function () {
        $(".topMenu-item").removeClass("topMenu-item-active");

        $(this).addClass("topMenu-item-active");

        $(".panelClose").click();

        resetAllInputs();
      });

      // Global Functions
      // Function to format date as YYYY-MM-DD
      function formatDate(date) {
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();

        // Ensure 2-digit formatting
        if (day < 10) {
          day = "0" + day;
        }
        if (month < 10) {
          month = "0" + month;
        }

        return year + "-" + month + "-" + day;
      }

      function formatDateTime(dateTime) {
        var months = [
          "Jan",
          "Feb",
          "Mar",
          "Apr",
          "May",
          "Jun",
          "Jul",
          "Aug",
          "Sep",
          "Oct",
          "Nov",
          "Dec",
        ];
        var hours = dateTime.getHours();
        var minutes = dateTime.getMinutes();
        var ampm = hours >= 12 ? "PM" : "AM";
        hours = hours % 12;
        hours = hours ? hours : 12; // Handle midnight (0 hours)
        minutes = minutes < 10 ? "0" + minutes : minutes;
        var strTime = hours + ":" + minutes + " " + ampm;
        var month = months[dateTime.getMonth()];
        var day = dateTime.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
        return day + "-" + month + "-" + dateTime.getFullYear() + " " + strTime;
      }

      // Function to reset all input fields
      function resetAllInputs() {
        $("input").val("");
        $("input[type=number]").val("");

        $('input[type="datetime-local]').val("");
        $("input[type=date]").val("");

        // // Reset all date inputs
        // var dateTimeInputs = document.querySelectorAll(
        //   'input[type="datetime-local"]'
        // );
        // // looping all the date inputs
        // dateTimeInputs.forEach(function (input) {
        //   input.value = "";
        // });

        // // Reset all date inputs
        // var dateInputs = document.querySelectorAll('input[type="date"]');
        // // looping all the date inputs
        // dateInputs.forEach(function (input) {
        //   input.value = "";
        // });

        // Resetting textarea
        $("textarea").val("");

        // Resetting select field selected option
        $("#procurement_unit").val(null).trigger("change");
        $("#procurement_product").val(null).trigger("change");
        $("#procurement_product_type").val(null).trigger("change");
        $("#procurement_product_supplier").val(null).trigger("change");
        $("#paymentMethods").val(null).trigger("change");
        $("#paymentSupplierNames").val(null).trigger("change");
        $("#paymentLotNo").val(null).trigger("change");

        // Select2 Initialization
        $("#procurement_unit").select2({
          placeholder: "Choose a unit",
          allowClear: true,
        });

        $("#procurement_product").select2({
          placeholder: "Choose a product",
          allowClear: true,
        });

        $("#procurement_product_type").select2({
          placeholder: "Choose a product type",
          allowClear: true,
        });

        $("#procurement_product_supplier").select2({
          placeholder: "Choose a supplier",
          allowClear: true,
        });

        $("#paymentMethods").select2({
          placeholder: "Choose a method",
          allowClear: true,
        });

        $("#paymentSupplierNames").select2({
          placeholder: "Choose a supplier",
          allowClear: true,
        });

        $("#paymentLotNo").select2({
          placeholder: "Choose a lot no",
          allowClear: true,
        });
      }

      function openSlidePanel(
        panelId,
        panelHeadingId,
        panelType,
        panelSubmitButton,
        panelBtnAttrName
      ) {
        // Opening Slide Panel
        $(`#${panelId}`).css("right", "0");

        // Changing panel Heading label
        $(`#${panelHeadingId}`).text(`Add ${panelType} Data`);

        // Changing panel save button label
        $(`#${panelSubmitButton}`).text("Save");

        // Changing panel save button attribute
        $(`#${panelSubmitButton}`).attr(panelBtnAttrName, null);
      }

      function closeSlidePanel(panelId) {
        // Opening Slide Panel
        $(`#${panelId}`).css("right", "-600px");

        // Resetting all the input fields' data
        resetAllInputs();

        // Destroying select2 all the dropdowns
        // $('select.select2-hidden-accessible').select2('destroy');
      }

      function loadDropdowns() {
        loadProcurementProductType();

        // loadProcurementSuppliers();
        loadProcurementUnits();
      }

      // ---------------------------------------------------------
      // ----------------------- Dashboard -----------------------
      // ---------------------------------------------------------

      // Loading Charts
      loadProcurementSpendBySuppliersChart(
        "days",
        $("#procurementSpendChartFilter").val()
      );
      loadProcurementByDateChart(
        "days",
        $("#procurementAnalysisByDateChartFilter").val(),
        null,
        null,
        "price"
      );

      loadProcurementAgeByProductsChart(
        "days",
        $("#procurementAgeByProductsFilter").val(),
        null,
        null
      );

      loadSupplierPerformanceScorecardChart(
        "days",
        $("#supplierPerformanceScorecardChartFilter").val(),
        null,
        null,
        "price"
      );

      // Chart Filters
      $(document).on("change", "#procurementSpendChartFilter", (e) => {
        if ($(".supplierFilter").hasClass("btn-danger")) {
          loadProcurementSpendBySuppliersChart("days", $(e.target).val());
        } else if ($(".productFilter").hasClass("btn-danger")) {
          loadProcurementSpendByProductsChart("days", $(e.target).val());
        }
      });

      $(document).on("change", "#procurementAnalysisByDateChartFilter", (e) => {
        if ($(".spendByDateFilter").hasClass("btn-danger")) {
          loadProcurementByDateChart(
            "days",
            $(e.target).val(),
            null,
            null,
            "price"
          );
        } else if ($(".quantityByDateFilter").hasClass("btn-danger")) {
          loadProcurementByDateChart(
            "days",
            $(e.target).val(),
            null,
            null,
            "quantity"
          );
        }
      });

      $(document).on("change", "#procurementAnalysisByDateChartFilter", (e) => {
        if ($(".spendByDateFilter").hasClass("btn-danger")) {
          loadProcurementByDateChart(
            "days",
            $(e.target).val(),
            null,
            null,
            "price"
          );
        } else if ($(".quantityByDateFilter").hasClass("btn-danger")) {
          loadProcurementByDateChart(
            "days",
            $(e.target).val(),
            null,
            null,
            "quantity"
          );
        }
      });

      $(document).on("change", "#procurementAgeByProductsFilter", (e) => {
        loadProcurementAgeByProductsChart(
          "days",
          $(e.target).val(),
          null,
          null
        );
      });

      $(document).on(
        "change",
        "#supplierPerformanceScorecardChartFilter",
        (e) => {
          if ($(".priceWisePerformanceFilter").hasClass("btn-danger")) {
            loadSupplierPerformanceScorecardChart(
              "days",
              $(e.target).val(),
              null,
              null,
              "price"
            );
          } else if (
            $(".quantityWisePerformanceFilter").hasClass("btn-danger")
          ) {
            loadSupplierPerformanceScorecardChart(
              "days",
              $(e.target).val(),
              null,
              null,
              "quantity"
            );
          }
        }
      );

      // Button Click Events
      $(document).on("click", ".supplierFilter", (e) => {
        $(".supplierFilter").removeClass("btn-outline-danger");
        $(".productFilter").removeClass("btn-danger");

        $(".productFilter").addClass("btn-outline-danger");
        $(".supplierFilter").addClass("btn-danger");

        loadProcurementSpendBySuppliersChart(
          "days",
          $("#procurementSpendChartFilter").val()
        );
      });

      $(document).on("click", ".productFilter", (e) => {
        $(".productFilter").removeClass("btn-outline-danger");
        $(".supplierFilter").removeClass("btn-danger");

        $(".supplierFilter").addClass("btn-outline-danger");
        $(".productFilter").addClass("btn-danger");

        loadProcurementSpendByProductsChart(
          "days",
          $("#procurementSpendChartFilter").val()
        );
      });

      $(document).on("click", ".spendByDateFilter", (e) => {
        $(".spendByDateFilter").removeClass("btn-outline-danger");
        $(".quantityByDateFilter").removeClass("btn-danger");

        $(".quantityByDateFilter").addClass("btn-outline-danger");
        $(".spendByDateFilter").addClass("btn-danger");

        loadProcurementByDateChart(
          "days",
          $("#procurementAnalysisByDateChartFilter").val(),
          null,
          null,
          "price"
        );
      });

      $(document).on("click", ".quantityByDateFilter", (e) => {
        $(".quantityByDateFilter").removeClass("btn-outline-danger");
        $(".spendByDateFilter").removeClass("btn-danger");

        $(".spendByDateFilter").addClass("btn-outline-danger");
        $(".quantityByDateFilter").addClass("btn-danger");

        loadProcurementByDateChart(
          "days",
          $("#procurementAnalysisByDateChartFilter").val(),
          null,
          null,
          "quantity"
        );
      });

      $(document).on("click", ".priceWisePerformanceFilter", (e) => {
        $(".priceWisePerformanceFilter").removeClass("btn-outline-danger");
        $(".quantityWisePerformanceFilter").removeClass("btn-danger");

        $(".quantityWisePerformanceFilter").addClass("btn-outline-danger");
        $(".priceWisePerformanceFilter").addClass("btn-danger");

        loadSupplierPerformanceScorecardChart(
          "days",
          $("#supplierPerformanceScorecardChartFilter").val(),
          null,
          null,
          "price"
        );
      });

      $(document).on("click", ".quantityWisePerformanceFilter", (e) => {
        $(".quantityWisePerformanceFilter").removeClass("btn-outline-danger");
        $(".priceWisePerformanceFilter").removeClass("btn-danger");

        $(".priceWisePerformanceFilter").addClass("btn-outline-danger");
        $(".quantityWisePerformanceFilter").addClass("btn-danger");

        loadSupplierPerformanceScorecardChart(
          "days",
          $("#supplierPerformanceScorecardChartFilter").val(),
          null,
          null,
          "quantity"
        );
      });

      // Chart Functions
      function loadProcurementSpendBySuppliersChart(
        filter_type,
        filter_days,
        from_date,
        to_date
      ) {
        if (filter_type == "days") {
          switch (filter_days) {
            case "7":
              var d = new Date();
              d.setDate(d.getDate() - 7);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "90":
              var d = new Date();
              d.setDate(d.getDate() - 90);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "180":
              var d = new Date();
              d.setDate(d.getDate() - 180);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            default:
              var d = new Date();
              d.setDate(d.getDate() - 30);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
          }
        }

        $.ajax({
          url: `/api/v1/procurement/product/chart/spend/by/supplier?from_date=${from_date}&to_date=${to_date}`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            let dataPoints = [];

            data?.data.map((item) => {
              dataPoints.push({
                label: item?.SupplierMaster?.supplier_name,
                y: parseFloat(item.total_amount) || 0,
              });
            });

            let procurementSpendChartOptions = {
              backgroundColor: "#f7f9fd",
              animationEnabled: true,
              zoomEnabled: true,
              theme: "light2",
              axisX: {
                interval: 1,
              },
              axisY2: {
                prefix: "₹ ",
              },
              data: [
                {
                  toolTipContent: "{label}: <strong>₹ {y}</strong>",
                  indexLabel: "₹ {y}",
                  type: "bar",
                  axisYType: "secondary",
                  dataPoints,
                },
              ],
            };

            new CanvasJS.Chart(
              "procurementSpend",
              procurementSpendChartOptions
            ).render();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function loadProcurementSpendByProductsChart(
        filter_type,
        filter_days,
        from_date,
        to_date
      ) {
        if (filter_type == "days") {
          switch (filter_days) {
            case "7":
              var d = new Date();
              d.setDate(d.getDate() - 7);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "90":
              var d = new Date();
              d.setDate(d.getDate() - 90);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "180":
              var d = new Date();
              d.setDate(d.getDate() - 180);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            default:
              var d = new Date();
              d.setDate(d.getDate() - 30);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
          }
        }

        $.ajax({
          url: `/api/v1/procurement/product/chart/spend/by/product?from_date=${from_date}&to_date=${to_date}`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            let dataPoints = [];

            data?.data.map((item) => {
              dataPoints.push({
                label: item?.ProductMaster?.product_name,
                y: parseFloat(item.total_amount) || 0,
              });
            });

            let procurementSpendChartOptions = {
              backgroundColor: "#f7f9fd",
              animationEnabled: true,
              zoomEnabled: true,
              theme: "light2",
              axisX: {
                interval: 1,
              },
              axisY2: {
                prefix: "₹ ",
              },
              data: [
                {
                  toolTipContent: "{label}: <strong>₹ {y}</strong>",
                  indexLabel: "₹ {y}",
                  type: "bar",
                  axisYType: "secondary",
                  dataPoints,
                },
              ],
            };

            new CanvasJS.Chart(
              "procurementSpend",
              procurementSpendChartOptions
            ).render();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function loadProcurementByDateChart(
        filter_type,
        filter_days,
        from_date,
        to_date,
        type
      ) {
        if (filter_type == "days") {
          switch (filter_days) {
            case "7":
              var d = new Date();
              d.setDate(d.getDate() - 7);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "90":
              var d = new Date();
              d.setDate(d.getDate() - 90);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "180":
              var d = new Date();
              d.setDate(d.getDate() - 180);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            default:
              var d = new Date();
              d.setDate(d.getDate() - 30);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
          }
        }

        $.ajax({
          url: `/api/v1/procurement/product/chart/spend/by/date?from_date=${from_date}&to_date=${to_date}`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            let dataPoints = [];

            data?.data.map((item) => {
              let procurement_date = new Date(item?.procurement_date);

              dataPoints.push({
                // label: "₹ " + item.total_amount,

                x: new Date(
                  procurement_date.getFullYear(),
                  procurement_date.getMonth(),
                  procurement_date.getDate()
                ),
                y:
                  parseFloat(
                    type == "price"
                      ? item.total_amount
                      : item?.total_adjusted_quantity ||
                          item?.total_procurement_quantity
                  ) || 0,
              });
            });

            let procurementAnalysisByDateChartOptions = {
              backgroundColor: "#f7f9fd",
              animationEnabled: true,
              zoomEnabled: true,
              theme: "light2",
              axisX: {
                valueFormatString: "DD-MMM-YYYY",
                // crosshair: {
                //   enabled: true,
                //   snapToDataPoint: true,
                // },
                // minimum: 0,
              },
              axisY: {
                prefix: type == "price" ? "₹ " : "",
                suffix: type == "quantity" ? " kg" : "",
                // minimum: 0,
              },
              data: [
                {
                  toolTipContent:
                    type == "price"
                      ? "{x}: <strong>₹ {y}</strong>"
                      : "{x}: <strong>{y} kg</strong>",
                  // indexLabel: "₹ {y}",
                  type: "line",
                  xValueFormatString: "DD-MMM-YYYY",
                  dataPoints,
                },
              ],
            };

            new CanvasJS.Chart(
              "procurementAnalysisByDateChart",
              procurementAnalysisByDateChartOptions
            ).render();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function loadProcurementAgeByProductsChart(
        filter_type,
        filter_days,
        from_date,
        to_date
      ) {
        if (filter_type == "days") {
          switch (filter_days) {
            case "7":
              var d = new Date();
              d.setDate(d.getDate() - 7);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "90":
              var d = new Date();
              d.setDate(d.getDate() - 90);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "180":
              var d = new Date();
              d.setDate(d.getDate() - 180);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            default:
              var d = new Date();
              d.setDate(d.getDate() - 30);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
          }
        }

        $.ajax({
          url: `/api/v1/procurement/product/chart/age/by/product?from_date=${from_date}&to_date=${to_date}`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            let dataPoints = [];

            data?.data.map((item) => {
              dataPoints.push({
                quantity: item?.quantity || 0,
                label: item?.product_name,
                y: parseFloat(item.days_old) || 0,
              });
            });

            let procurementAgeByProductsChartOptions = {
              backgroundColor: "#f7f9fd",
              animationEnabled: true,
              zoomEnabled: true,
              theme: "light2",
              axisX: {
                interval: 1,
              },
              axisY: {
                title: "Age (Days)",
              },
              data: [
                {
                  toolTipContent: "{label}: <strong>{y} days</strong>",
                  indexLabel: "{y} days ({quantity} kg)",
                  type: "area",
                  dataPoints,
                },
              ],
            };

            new CanvasJS.Chart(
              "procurementAgeByProductsChart",
              procurementAgeByProductsChartOptions
            ).render();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function loadSupplierPerformanceScorecardChart(
        filter_type,
        filter_days,
        from_date,
        to_date,
        type
      ) {
        if (filter_type == "days") {
          switch (filter_days) {
            case "7":
              var d = new Date();
              d.setDate(d.getDate() - 7);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "90":
              var d = new Date();
              d.setDate(d.getDate() - 90);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            case "180":
              var d = new Date();
              d.setDate(d.getDate() - 180);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
              break;
            default:
              var d = new Date();
              d.setDate(d.getDate() - 30);

              from_date = formatDate(d);
              to_date = formatDate(new Date());
          }
        }

        $.ajax({
          url: `/api/v1/procurement/product/chart/performance/by/supplier?from_date=${from_date}&to_date=${to_date}`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            let dataPointsProcurement = [];
            let dataPointsAdjustment = [];

            data?.data.map((item) => {
              dataPointsProcurement.push({
                label: item?.SupplierMaster?.supplier_name,
                y:
                  parseFloat(
                    type == "price"
                      ? item.total_procurement_price
                      : item?.total_procurement_quantity
                  ) || 0,
                indexLabel:
                  type == "price"
                    ? parseFloat(item?.total_procurement_price) > 0
                      ? "₹ " + parseFloat(item?.total_procurement_price)
                      : ""
                    : parseFloat(item?.total_procurement_quantity) > 0
                      ? parseFloat(item?.total_procurement_quantity) + " kg"
                      : "",
              });

              dataPointsAdjustment.push({
                label: item?.SupplierMaster?.supplier_name,
                y:
                  parseFloat(
                    type == "price"
                      ? item.total_adjusted_price
                      : item?.total_adjusted_quantity
                  ) || 0,
                indexLabel:
                  type == "price"
                    ? parseFloat(item?.total_adjusted_price) > 0
                      ? "₹ " + parseFloat(item?.total_adjusted_price)
                      : ""
                    : parseFloat(item?.total_adjusted_quantity) > 0
                      ? parseFloat(item?.total_adjusted_quantity) + " kg"
                      : "",
              });
            });

            let supplierPerformanceScorecardChartOptions = {
              backgroundColor: "#f7f9fd",
              animationEnabled: true,
              zoomEnabled: true,
              theme: "light2",
              axisX: {
                interval: 1,
              },
              axisY2: {
                prefix: type == "price" ? "₹ " : "",
                suffix: type == "quantity" ? " kg" : "",
                // minimum: 0,
              },
              data: [
                {
                  toolTipContent: "{label}: <strong>₹ {y}</strong>",
                  type: "stackedBar",
                  axisYType: "secondary",
                  dataPoints: dataPointsProcurement,
                },
                {
                  toolTipContent: "{label}: <strong>₹ {y}</strong>",
                  type: "stackedBar",
                  axisYType: "secondary",
                  dataPoints: dataPointsAdjustment,
                },
              ],
            };

            new CanvasJS.Chart(
              "supplierPerformanceScorecardChart",
              supplierPerformanceScorecardChartOptions
            ).render();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function explodePie(e) {
        if (
          typeof e.dataSeries.dataPoints[e.dataPointIndex].exploded ===
            "undefined" ||
          !e.dataSeries.dataPoints[e.dataPointIndex].exploded
        ) {
          e.dataSeries.dataPoints[e.dataPointIndex].exploded = true;
        } else {
          e.dataSeries.dataPoints[e.dataPointIndex].exploded = false;
        }
        e.chart.render();
      }

      // ---------------------------------------------------------
      // ----------------------- Purchases -----------------------
      // ---------------------------------------------------------

      // Open panel
      $("#openProcurementPanelBtn").click(function () {
        openSlidePanel(
          "procurementSlideInPanel",
          "procurementPanelHeading",
          "Procurement",
          "submitPurchases",
          "procurement_product_id"
        );

        loadProcurementSuppliers();
        // Changing panel save button attribute
        $(`#submitPurchases`).attr("procurement_lot_id", null);
      });

      // Close panel
      $("#closeProcurementPanelBtn").click(function () {
        closeSlidePanel("procurementSlideInPanel");

        selected_proc_product_id = "";
        selected_proc_product_name = "";
        selected_proc_supplier_id = "";
        selected_proc_supplier_name = "";

        $("#procurement_product").empty();
        $("#procurement_product_supplier").empty();
      });

      $(".procurementMenu").click(function () {
        $(".menu-container").addClass("d-none");

        $(".procurementContainer").removeClass("d-none");
        $(".procurementContainer").addClass("d-block");

        loadDropdowns();
        loadProcurementTableData();
      });

      $(document).on("click", ".modal-header .close", () => {
        $("#procurementProductModal").modal("hide");
      });

      $(document).on(
        "click",
        ".modal-header .close, .modal-footer .close",
        () => {
          $("#procurementProductModal").modal("hide");
        }
      );

      $("#submitPurchases").click(function () {
        savePurchases();
      });

      function loadProcurementTableData() {
        $("#procurementTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: "/api/v1/procurement/lot/stats",
            error: function (xhr, error, code) {
              $("#procurementTable").DataTable().destroy();
              $("#procurementTable").DataTable({
                scrollX: true,
                ordering: false,
              });

              toastr.error(xhr.responseJSON.message, "Error");
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: null },
            { data: "procurement_date" },
            { data: "procurement_lot" },
            { data: "total_product_count" },
            { data: "total_purchased_quantity" },
            { data: "total_purchased_price" },
          ],
          columnDefs: [
            {
              targets: [0],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa-solid fa-eye view viewProcurementProducts" procurement_lot_id=${row?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to edit this Procurement"></i>`;
              },
            },
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(row["procurement_date"]);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];

                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return day + "-" + month + "-" + date.getFullYear();
              },
            },
            {
              targets: [3],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [4],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(data || 0).toFixed(2);
              },
            },
            {
              targets: [5],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(data || 0).toFixed(2);
              },
            },
          ],
          // "infoCallback": function (settings, start, end, max, total, pre) {
          //   return start + " to " + end;
          // }
        });
      }

      $(document).on("click", ".viewProcurementProducts", (e) => {
        // Changing panel input fields data
        $("#closeProcurementPanelBtn").click();

        const view_lot_no = $(e.target)
          .closest("tr")
          .children("td")
          .eq(2)
          .text();

        const procurement_lot_id = $(e.target).attr("procurement_lot_id");

        const view_total_products = $(e.target)
          .closest("tr")
          .children("td")
          .eq(3)
          .text();

        const view_total_weight = $(e.target)
          .closest("tr")
          .children("td")
          .eq(4)
          .text();

        $("#view_lot_no").text(view_lot_no);

        $("#view_lot_no").attr("procurement_lot_id", procurement_lot_id);

        $("#view_lot_no").attr(
          "procurement_date",
          $(e.target).closest("tr").children("td").eq(1).text()
        );

        $("#view_lot_no").attr(
          "procurement_date",
          $(e.target).closest("tr").children("td").eq(1).text()
        );

        $("#view_total_products").text(view_total_products);

        $("#view_total_weight").text(view_total_weight);

        // Opening Slied Panel
        $("#procurementProductModal").modal("show");

        loadProcurementProductTableData(procurement_lot_id);
      });

      function loadProcurementProductTableData(procurement_lot_id) {
        if (!procurement_lot_id) {
          toastr["warning"]("Lot no should not be empty!");
        }
        $("#procurementProductTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: `/api/v1/procurement/product?procurement_lot_id=${procurement_lot_id}`,
            error: function (xhr, error, code) {
              $("#procurementProductTable").DataTable().destroy();
              $("#procurementProductTable").DataTable({
                scrollX: true,
                ordering: false,
              });

              if (xhr["status"] == 420) {
                toastr["warning"](xhr["responseJSON"]["message"]);
              } else {
                toastr["error"](xhr["responseJSON"]["message"]);
              }
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: null },
            { data: null },
            { data: "ProductMaster.product_name" },
            { data: "procurement_product_type" },
            { data: "procurement_quantity" },
            { data: "procurement_price" },
            { data: "procurement_totalamount" },
            { data: "SupplierMaster.supplier_name" },
            { data: "procurement_purchaser" },
            { data: null },
          ],
          columnDefs: [
            {
              targets: [0],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa fa-pen-to-square edit editProcurementProducts" procurement_product_id=${row?.id} unit_master_id=${row["pl"]?.["UnitMaster"]?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f;${parseFloat(row["total_paid"] || 0) > 0 ? "display:none" : ""}" data-toggle="tooltip" data-placement="top" title="Click this button to edit this product"></i>`;
              },
            },
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa fa-trash del delProcurementProduct" procurement_product_id='${row["id"]}' aria-hidden="true" style="font-size:15px;color:#f07b3f;${parseFloat(row["total_paid"] || 0) > 0 ? "display:none" : ""}" data-toggle="tooltip" data-placement="top" title="Click this button to delete this Procurement"></i>`;
              },
            },
            {
              targets: [2],
              className: "text-left",
              render: function (data, type, row) {
                if (row["procurement_product_type"] == "UNPROCESSED") {
                  data = data.replaceAll("-WHOLE", "");
                }

                return `<span product_master_id=${row["ProductMaster"]?.id}>${data}</span>`;
              },
            },
            {
              targets: [4],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(
                  row["adjusted_quantity"] || row["procurement_quantity"] || 0
                ).toFixed(2);
              },
            },
            {
              targets: [5],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(
                  row["adjusted_price"] || row["procurement_price"] || 0
                ).toFixed(2);
              },
            },
            {
              targets: [6],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(data || 0).toFixed(2);
              },
            },
            {
              targets: [7],
              className: "text-left",
              render: function (data, type, row) {
                return `<span supplier_master_id=${row["SupplierMaster"]?.id}>${data}</span>`;
              },
            },
            {
              targets: [9],
              className: "text-left",
              render: function (data, type, row) {
                if (parseFloat(row["total_paid"] || 0) == 0) {
                  return `<span class="text-secondary">Pending <i class="fa-solid fa-hourglass-half"></i></span>`;
                } else if (
                  parseFloat(row["total_amount"] || 0) ==
                  parseFloat(row["total_paid"] || 0)
                ) {
                  return `<span class="text-success">Paid <i class="fa-solid fa-circle-check"></i></span>`;
                } else if (
                  parseFloat(row["total_amount"] || 0) >
                  parseFloat(row["total_paid"] || 0)
                ) {
                  return `<span class="text-info">Due <i class="fa-solid fa-money-bill-transfer"></i></span>`;
                }
              },
            },
          ],
          drawCallback: () => {},
        });
      }

      $(document).on("click", ".editProcurementProducts", async (e) => {
        // Changing panel input fields data

        const supplier_master_id = $(e.target)
          .closest("tr")
          .children("td")
          .eq(7)
          .find("span")
          .attr("supplier_master_id");

        let paidStatus = await getPaidStatus(
          $(e.target).attr("procurement_product_id"),
          supplier_master_id
        );

        if (paidStatus > 0) {
          return toastr.warning(
            "Unable to edit the paid product",
            "Already Paid"
          );
        }

        $("#procurement_date").val(
          formatDate(new Date($("#view_lot_no").attr("procurement_date")))
        );

        $("#procurement_unit")
          .val(
            $(e.target)
              .closest("tr")
              .children("td")
              .eq(0)
              .find("i")
              .attr("unit_master_id")
          )
          .trigger("change");

        // $("#procurement_product")
        //   .val(

        //   )
        //   .trigger("change");

        selected_proc_product_id = $(e.target)
          .closest("tr")
          .children("td")
          .eq(2)
          .find("span")
          .attr("product_master_id");

        selected_proc_product_name = $(e.target)
          .closest("tr")
          .children("td")
          .eq(2)
          .find("span")
          .text();

        $("#procurement_product_type")
          .val($(e.target).closest("tr").children("td").eq(3).text())
          .trigger("change");

        $("#procurement_quantity").val(
          $(e.target).closest("tr").children("td").eq(4).text()
        );

        $("#procurement_price").val(
          $(e.target).closest("tr").children("td").eq(5).text()
        );

        // $("#procurement_product_supplier")
        //   .val(supplier_master_id)
        //   .trigger("change");

        selected_proc_supplier_id = supplier_master_id;
        selected_proc_supplier_name = $(e.target)
          .closest("tr")
          .children("td")
          .eq(7)
          .find("span")
          .text();

        $("#procurement_purchaser").val(
          $(e.target).closest("tr").children("td").eq(8).text()
        );

        // Opening Slied Panel
        $("#openProcurementPanelBtn").click();

        // Changing panel heading
        $("#procurementPanelHeading").text("Edit Procurement Data");

        // Changing panel button label
        $("#submitPurchases").text("Update");

        // Changing panel button attribute
        $("#submitPurchases").attr(
          "procurement_product_id",
          $(e.target).attr("procurement_product_id")
        );

        $("#submitPurchases").attr(
          "procurement_lot_id",
          $("#view_lot_no").attr("procurement_lot_id")
        );

        $("#procurementProductModal").modal("hide");
      });

      $(document).on("click", ".delProcurementProduct", (e) => {
        const procurement_lot_id = $("#view_lot_no").attr("procurement_lot_id");
        const procurement_product_id = $(e.target).attr(
          "procurement_product_id"
        );
        const supplier_master_id = $(e.target)
          .closest("tr")
          .children("td")
          .eq(7)
          .find("span")
          .attr("supplier_master_id");
        const currentRow = $(e.target).closest("tr");
        $.confirm({
          title: "Delete Product Detail?",
          content: "Are you sure, do you want to remove this Product?",
          backgroundDismiss: false,
          backgroundDismissAnimation: "glow",
          type: "red",
          closeIcon: true,
          closeIconClass: "fa fa-close",
          typeAnimated: true,
          boxWidth: "30%",
          useBootstrap: false,
          autoClose: "no|5000",
          buttons: {
            delete: {
              text: "Delete",
              btnClass: "btn-red",
              action: function () {
                $.ajax({
                  url:
                    "/api/v1/procurement/product?procurement_product_id=" +
                    procurement_product_id +
                    "&supplier_master_id=" +
                    supplier_master_id,
                  method: "delete",
                })
                  .done(function (response) {
                    //loading data to table
                    if (procurement_lot_id)
                      loadProcurementProductTableData(procurement_lot_id);
                    loadProcurementTableData();

                    toastr.success(
                      "Procurement product has been deleted successfully",
                      "Deleted"
                    );
                  })
                  .fail(function (response) {
                    if (response.status == 420) {
                      toastr.warning(
                        response?.responseJSON?.message,
                        "Already Paid"
                      );
                    } else {
                      toastr.error(
                        "Procurement product detail failed to delete!",
                        "Error"
                      );
                    }
                  });
              },
            },
            no: function () {
              toastr.info("Procurement product detail is safe now", "Info");
            },
          },
        });
      });

      function getPaidStatus(procurement_product_id, supplier_master_id) {
        return new Promise((resolve, reject) => {
          if (!procurement_product_id || !supplier_master_id) {
            return toastr["warning"](
              "Product and supplier master id must not be empty"
            );
          }
          // Load Products
          $.ajax({
            url: `/api/v1/procurement/product/paid/status?procurement_product_id=${procurement_product_id}&supplier_master_id=${supplier_master_id}`,
            method: "GET",
            dataType: "json",
            contentType: "application/json",
            crossDomain: true,
            processData: false,
            success: ({ data }) => {
              resolve(data);
            },
            error: (jqXhr, textStatus, errorThrown) => {
              if (jqXhr["responseJSON"]["message"] == "No data found!") {
                return resolve();
              } else {
                if (jqXhr["status"] == 420) {
                  toastr["warning"](jqXhr["responseJSON"]["message"]);
                } else {
                  toastr["error"](jqXhr["responseJSON"]["message"]);
                }
              }
              reject();
            },
          });
        });
      }

      function loadProcurementProductType() {
        $("#procurement_product_type").select2({
          placeholder: "Choose a Type",
          allowClear: true,
          data: [
            {
              id: "UNPROCESSED",
              text: "UNPROCESSED / RAW",
            },
            {
              id: "CLEANED",
              text: "CLEANED",
            },
            {
              id: "PEELED",
              text: "PEELED",
            },
            {
              id: "SOAKED",
              text: "SOAKED",
            },
            {
              id: "RE-GLAZED",
              text: "RE-GLAZED",
            },
            {
              id: "GRADED",
              text: "GRADED",
            },
            {
              id: "COOKED",
              text: "COOKED",
            },
            {
              id: "SORTED",
              text: "SORTED",
            },
            {
              id: "VALUE-ADDED",
              text: "VALUE-ADDED",
            },
          ],
        });

        // Clearing selected value
        $("#procurement_product_type").val(null).trigger("change");
      }

      $(document).on("change", "#procurement_product_type", (e) => {
        let productDisplayType = "";

        if ($(e.target).val() == "UNPROCESSED") {
          productDisplayType = "UNPROCESSED";
        } else {
          productDisplayType = "Others";
        }

        if ($(e.target).val()) loadProcurementProducts(productDisplayType);
      });

      function loadProcurementProducts(productDisplayType) {
        // Load Products
        $("#procurement_product").empty();

        $("#procurement_product").select2({
          placeholder: "Choose a product",
          allowClear: true,
          ajax: {
            url: `/api/v1/master/product?${productDisplayType == "UNPROCESSED" ? "product_category_name=Whole&is_product_size_empty=true" : ""}`,
            data: (params) => {
              params.page = params.page || 1;
              params.length = 25;
              params.start = (params.page - 1) * params.length;

              let query = {
                dropdownSearch: params.term,
                start: params.start,
                length: params.length,
              };

              // Query parameters will be ?search=[term]&page=[page]
              return query;
            },
            processResults: (data, params) => {
              return {
                results: $.map(data?.data?.rows, (item) => {
                  return {
                    id: item.id,
                    text:
                      productDisplayType == "UNPROCESSED"
                        ? item?.ProductCategoryMaster?.SpeciesMaster
                            ?.species_name
                        : item.product_name,
                  };
                }),
                pagination: {
                  more: params.page * params.length < data?.data?.count,
                },
              };
            },
          },
          data:
            selected_proc_product_id && selected_proc_product_name
              ? [
                  {
                    id: selected_proc_product_id,
                    text: selected_proc_product_name,
                  },
                ]
              : [],
        });
      }

      function loadProcurementUnits() {
        // Load Products
        $.ajax({
          url: `/api/v1/master/unit?unit_type=Collection Center`,
          method: "GET",
          dataType: "json",
          contentType: "application/json",
          crossDomain: true,
          processData: false,
          success: (data) => {
            // Loading data
            $("#procurement_unit").select2({
              placeholder: "Choose an unit",
              allowClear: true,
              data: $.map(data?.data?.rows, function (item) {
                return {
                  id: item.id,
                  text: item.unit_code,
                };
              }),
            });

            // Clearing selected value
            $("#procurement_unit").val(null).trigger("change");
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      function loadProcurementSuppliers() {
        // Load Suppliers
        $("#procurement_product_supplier").select2({
          placeholder: "Choose a supplier",
          allowClear: true,
          ajax: {
            url: "/api/v1/master/supplier",
            data: (params) => {
              params.page = params.page || 1;
              params.length = 25;
              params.start = (params.page - 1) * params.length;

              let query = {
                dropdownSearch: params.term,
                start: params.start,
                length: params.length,
              };

              // Query parameters will be ?search=[term]&page=[page]
              return query;
            },
            processResults: (data, params) => {
              return {
                results: $.map(data?.data?.rows, (item) => {
                  return {
                    id: item.id,
                    text: item.supplier_name,
                  };
                }),
                pagination: {
                  more: params.page * params.length < data?.data?.count,
                },
              };
            },
          },
          data:
            selected_proc_supplier_id && selected_proc_supplier_name
              ? [
                  {
                    id: selected_proc_supplier_id,
                    text: selected_proc_supplier_name,
                  },
                ]
              : [],
        });

        // // // Clearing selected value
        // $("#procurement_product_supplier")
        //   .val(selected_proc_supplier_id)
        //   .trigger("change");
      }

      function savePurchases() {
        const procurement_lot_id =
          $("#submitPurchases").attr("procurement_lot_id");
        const procurement_product_id = $("#submitPurchases").attr(
          "procurement_product_id"
        );

        let url = "/api/v1/procurement/product";
        let method = "POST";
        let input_params = {
          procurement_date: $("#procurement_date").val(),
          unit_master_id: $("#procurement_unit").val(),
          product_master_id: $("#procurement_product").val(),
          procurement_product_type: $("#procurement_product_type").val(),
          procurement_quantity: $("#procurement_quantity").val(),
          procurement_price: $("#procurement_price").val(),
          supplier_master_id: $("#procurement_product_supplier").val(),
          procurement_purchaser: $("#procurement_purchaser").val(),
        };

        if (procurement_product_id) {
          if (!procurement_lot_id) {
            toastr["warning"]("Procurement lot id must not be empty");
            return;
          }

          url = "/api/v1/procurement/product";
          method = "PUT";
          input_params = {
            procurement_product_id,
            procurement_product_data: {
              procurement_lot_id,
              ...input_params,
            },
          };
        }

        $.ajax({
          url,
          method,
          dataType: "json",
          contentType: "application/json",
          data: JSON.stringify(input_params),
          crossDomain: true,
          processData: false,
          success: (data) => {
            toastr["success"](data?.message);

            $("#closeProcurementPanelBtn").click();

            // if (procurement_lot_id) {
            //   loadProcurementProductTableData(procurement_lot_id);
            // }

            loadProcurementTableData();

            resetAllInputs();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      $("#resetProcurementDataBtn").on("click", resetAllInputs);

      // ---------------------------------------------------------
      // ----------------------- Supplier ------------------------
      // ---------------------------------------------------------

      // Open panel
      $("#openSupplierPanelBtn").click(function () {
        openSlidePanel(
          "supplierSlideInPanel",
          "supplierPanelHeading",
          "Supplier",
          "submitPurchases",
          "supplier_product_id"
        );
      });

      // Close panel
      $("#closeSupplierPanelBtn").click(function () {
        closeSlidePanel("supplierSlideInPanel");
      });

      $(".supplierMenu").click(function () {
        $(".menu-container").addClass("d-none");

        $(".supplierContainer").removeClass("d-none");
        $(".supplierContainer").addClass("d-block");

        loadSupplierTableData();
      });

      $(document).on("click", ".modal-header .close", () => {
        $("#supplierProductModal").modal("hide");
      });

      $(document).on(
        "click",
        ".modal-header .close, .modal-footer .close",
        () => {
          $("#supplierProductModal").modal("hide");
        }
      );

      function loadSupplierTableData() {
        $("#supplierTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: "/api/v1/master/supplier/orders",
            error: function (xhr, error, code) {
              $("#supplierTable").DataTable().destroy();
              $("#supplierTable").DataTable({
                scrollX: true,
                ordering: false,
              });

              toastr.error(xhr.responseJSON.message, "Error");
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: "id" },
            { data: "supplier_name" },
            { data: "email" },
            { data: "phone" },
            { data: "address" },
            { data: "last_order_on" },
            { data: "last_order_status" },
            { data: "total_orders" },
            { data: "total_paid" },
            { data: "due_amount" },
            { data: null },
          ],
          columnDefs: [
            {
              targets: [5],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(row?.last_order_on);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];

                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return day + "-" + month + "-" + date.getFullYear();
              },
            },
            {
              targets: [6],
              className: "text-left",
              render: function (data, type, row) {
                return `<span class="text-success">Delivered <i class="fa-solid fa-circle-check"></i></span>`;
              },
            },
            {
              targets: [7],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [8],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(data || 0).toFixed(2);
              },
            },
            {
              targets: [9],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(data || 0).toFixed(2);
              },
            },
            {
              targets: [10],
              className: "text-center",
              render: function (data, type, row) {
                return `<i class="fa-solid fa-eye view viewSupplierProducts" supplier_master_id=${row?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to view this Supplier Orders"></i>`;
              },
            },
          ],
        });
      }

      $(document).on("click", ".viewSupplierProducts", (e) => {
        // Changing panel input fields data
        $("#closeSupplierPanelBtn").click();

        const supplier_master_id = $(e.target)
          .closest("tr")
          .children("td")
          .eq(0)
          .text();

        $("#view_supplier_master_id").text(supplier_master_id);

        $("#view_supplier_name").text(
          $(e.target).closest("tr").children("td").eq(1).text()
        );

        $("#view_supplier_email").text(
          $(e.target).closest("tr").children("td").eq(2).text()
        );

        $("#view_supplier_phone").text(
          $(e.target).closest("tr").children("td").eq(3).text()
        );

        $("#view_supplier_address").text(
          $(e.target).closest("tr").children("td").eq(4).text()
        );

        // Opening Slied Panel
        $("#supplierProductModal").modal("show");

        loadSupplierProductTableData(supplier_master_id);
      });

      function loadSupplierProductTableData(supplier_master_id) {
        if (!supplier_master_id) {
          toastr["warning"]("Supplier ID should not be empty!");
        }
        $("#supplierProductTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: `/api/v1/procurement/product?supplier_master_id=${supplier_master_id}`,
            error: function (xhr, error, code) {
              $("#supplierProductTable").DataTable().destroy();
              $("#supplierProductTable").DataTable({
                scrollX: true,
                ordering: false,
              });

              if (xhr["status"] == 420) {
                toastr["warning"](xhr["responseJSON"]["message"]);
              } else {
                toastr["error"](xhr["responseJSON"]["message"]);
              }
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: "pl.procurement_lot" },
            { data: "created_at" },
            { data: "ProductMaster.product_name" },
            { data: "procurement_product_type" },
            { data: "procurement_quantity" },
            { data: "procurement_price" },
            { data: "procurement_totalamount" },
            { data: "procurement_purchaser" },
          ],
          columnDefs: [
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(data);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];

                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return day + "-" + month + "-" + date.getFullYear();
              },
            },
            {
              targets: [2],
              className: "text-left",
              render: function (data, type, row) {
                if (row["procurement_product_type"] == "UNPROCESSED") {
                  data = data.replaceAll("-WHOLE", "");
                }

                return `<span product_master_id=${row["ProductMaster"]?.id}>${data}</span>`;
              },
            },
            {
              targets: [4],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(
                  row["adjusted_quantity"] || row["procurement_quantity"] || 0
                ).toFixed(2);
              },
            },
            {
              targets: [5],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(
                  row["adjusted_price"] || row["procurement_price"] || 0
                ).toFixed(2);
              },
            },
            {
              targets: [6],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(data || 0).toFixed(2);
              },
            },
          ],
          drawCallback: () => {},
        });
      }

      $("#resetSupplierDataBtn").on("click", resetAllInputs);

      // ----------------------------------------------------------
      // ----------------------- Adjustment -----------------------
      // ----------------------------------------------------------

      $(".adjustmentMenu").click(function () {
        $(".menu-container").addClass("d-none");

        $(".adjustmentContainer").removeClass("d-none");
        $(".adjustmentContainer").addClass("d-block");

        loadAdjustmentTableData();
      });

      function loadAdjustmentTableData() {
        $("#adjustmentTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: "/api/v1/procurement/product",
            error: function (xhr, error, code) {
              $("#adjustmentTable").DataTable().destroy();
              $("#adjustmentTable").DataTable({
                scrollX: true,
                ordering: false,
              });

              toastr.error(xhr.responseJSON.message, "Error");
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: "pl.procurement_lot" },
            { data: "ProductMaster.product_name" },
            { data: "procurement_quantity" },
            { data: "adjusted_quantity" },
            { data: "procurement_price" },
            { data: "adjusted_price" },
            { data: "adjusted_reason" },
            { data: "adjusted_surveyor" },
            { data: "created_at" },
          ],
          columnDefs: [
            {
              targets: [0],
              className: "text-left",
              render: function (data, type, row) {
                return `<span procurement_product_id=${row["id"]}>${data}</span>`;
              },
            },
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                if (row["procurement_product_type"] == "UNPROCESSED") {
                  data = data.replaceAll("-WHOLE", "");
                }

                return `<span product_master_id=${row["ProductMaster"]?.id}>${data}</span>`;
              },
            },
            {
              targets: [3],
              className: "text-left",
              render: function (data, type, row) {
                return `<input type="number" class="form-control adjusted_quantity" placeholder="Type the adjustment quantity" value=${
                  data || 0
                }></span>`;
              },
            },
            {
              targets: [5],
              className: "text-left",
              render: function (data, type, row) {
                return `<input type="number" class="form-control adjusted_price" placeholder="Type the adjustment price" value=${
                  data || 0
                }></span>`;
              },
            },
            {
              targets: [6],
              className: "text-left",
              render: function (data, type, row) {
                return `<input type="text" style="width:300px" class="form-control adjusted_reason" placeholder="Type the reason for adjustment" value=${
                  data || ""
                }></span>`;
              },
            },
            {
              targets: [7],
              className: "text-left",
              render: function (data, type, row) {
                return `<input type="text" style="width:200px" class="form-control adjusted_surveyor" placeholder="Type the adjustment servoyer name" value=${
                  data || ""
                }></span>`;
              },
            },
            {
              targets: [8],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(row["created_at"]);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];
                var hours = date.getHours();
                var minutes = date.getMinutes();
                var ampm = hours >= 12 ? "PM" : "AM";
                hours = hours % 12;
                hours = hours ? hours : 12; // Handle midnight (0 hours)
                minutes = minutes < 10 ? "0" + minutes : minutes;
                var strTime = hours + ":" + minutes + " " + ampm;
                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return (
                  day + "-" + month + "-" + date.getFullYear() + " " + strTime
                );
              },
            },
          ],
          // "infoCallback": function (settings, start, end, max, total, pre) {
          //   return start + " to " + end;
          // }
        });
      }

      let original_adjusted_quantity = "";
      let original_adjusted_price = "";
      let original_adjusted_reason = "";
      let original_adjusted_surveyor = "";

      $(document).on("focus", "#adjustmentTable > tbody > tr", function (e) {
        original_adjusted_quantity = $(e.target)
          .closest("tr")
          .find(".adjusted_quantity")
          .val();
        original_adjusted_price = $(e.target)
          .closest("tr")
          .find(".adjusted_price")
          .val();
        original_adjusted_reason = $(e.target)
          .closest("tr")
          .find(".adjusted_reason")
          .val();
        original_adjusted_surveyor = $(e.target)
          .closest("tr")
          .find(".adjusted_surveyor")
          .val();
      });

      $(document).on("focusout", "#adjustmentTable > tbody > tr", function (e) {
        const adjusted_quantity = $(e.target)
          .closest("tr")
          .find(".adjusted_quantity");
        const adjusted_price = $(e.target)
          .closest("tr")
          .find(".adjusted_price");
        const adjusted_reason = $(e.target)
          .closest("tr")
          .find(".adjusted_reason");
        const adjusted_surveyor = $(e.target)
          .closest("tr")
          .find(".adjusted_surveyor");

        if (
          adjusted_quantity.val() == 0 &&
          adjusted_price.val() == 0 &&
          !adjusted_reason.val() &&
          !adjusted_surveyor.val()
        ) {
          // toastr["warning"]("Fill all the required fields");
          // if (adjusted_quantity.val() == 0) {
          //   adjusted_quantity.focus();
          // } else if (adjusted_price.val() == 0) {
          //   adjusted_price.focus();
          // } else if (!adjusted_reason.val()) {
          //   adjusted_reason.focus();
          // } else if (!adjusted_surveyor.val()) {
          //   adjusted_surveyor.focus();
          // }
        } else {
          if (
            original_adjusted_quantity != adjusted_quantity.val() ||
            original_adjusted_price != adjusted_price.val() ||
            original_adjusted_reason != adjusted_reason.val() ||
            original_adjusted_surveyor != adjusted_surveyor.val()
          ) {
            saveAdjustment(
              $(e.target)
                .closest("tr")
                .eq(0)
                .find("span")
                .attr("procurement_product_id"),
              adjusted_quantity.val(),
              adjusted_price.val(),
              adjusted_reason.val(),
              adjusted_surveyor.val()
            );
          }
        }
      });

      function saveAdjustment(
        procurement_product_id,
        adjusted_quantity,
        adjusted_price,
        adjusted_reason,
        adjusted_surveyor
      ) {
        if (!procurement_product_id) {
          toastr["warning"]("Procurement product id must not be empty");
          return;
        }

        const input_params = {
          procurement_product_id,
          procurement_product_data: {
            adjusted_quantity,
            adjusted_price,
            adjusted_reason,
            adjusted_surveyor,
          },
        };

        $.ajax({
          url: "/api/v1/procurement/product",
          method: "PUT",
          dataType: "json",
          contentType: "application/json",
          data: JSON.stringify(input_params),
          crossDomain: true,
          processData: false,
          success: (data) => {
            // toastr["success"](data?.message);
            // loadAdjustmentTableData();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      $("#resetAdjustmentDataBtn").on("click", resetAllInputs);

      // ---------------------------------------------------------
      // ------------------------- Payment -----------------------
      // ---------------------------------------------------------

      // Open panel
      $("#openPaymentPanelBtn").click(function () {
        openSlidePanel(
          "paymentSlideInPanel",
          "paymentPanelHeading",
          "Payment",
          "submitPayment",
          "payment_product_id"
        );

        loadPaymentSuppliers();
      });

      // Close panel
      $("#closePaymentPanelBtn").click(function () {
        closeSlidePanel("paymentSlideInPanel");

        // Changing panel save button attribute
        $(`#submitPayment`).attr("purchase_payment_id", null);

        $("#total_payment_amount").text("0.00");
        view_purchase_payment_id = "";
        selected_payment_supplier_id = "";
        selected_payment_supplier_name = "";
        selected_payment_lot_id = "";
        selected_payment_lot_no = "";

        $("#paymentSupplierNames").empty();
        $("#paymentLotNo").empty();
      });

      $(".paymentMenu").click(function () {
        $(".menu-container").addClass("d-none");

        $(".paymentContainer").removeClass("d-none");
        $(".paymentContainer").addClass("d-block");

        loadPaymentDropdowns();
        loadPaymentTableData();
      });

      $(document).on("click", ".modal-header .close", () => {
        $("#paymentProductModal").modal("hide");
      });

      $(document).on(
        "click",
        ".modal-header .close, .modal-footer .close",
        () => {
          $("#paymentProductModal").modal("hide");
        }
      );

      $("#submitPayment").click(function () {
        savePayment();
      });

      function loadPaymentDropdowns() {
        // loadPaymentSuppliers();
        loadPaymentMethods();
      }

      function loadPaymentTableData() {
        $("#paymentTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: "/api/v1/purchase/payment",
            error: function (xhr, error, code) {
              $("#paymentTable").DataTable().destroy();
              $("#paymentTable").DataTable({
                scrollX: true,
                ordering: false,
              });

              toastr.error(xhr.responseJSON.message, "Error");
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: null },
            { data: null },
            { data: null },
            { data: "transaction_id" },
            { data: "payment_date" },
            { data: "SupplierMaster.supplier_name" },
            { data: "ProcurementLot.procurement_lot" },
            { data: "total_products" },
            { data: "payment_method" },
            { data: null },
            { data: "total_paid" },
            { data: "due_amount" },
            { data: "discount" },
            { data: "penalty" },
            { data: "tax_amount" },
            { data: "net_amount" },
          ],
          columnDefs: [
            {
              targets: [0],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa-solid fa-eye view viewPayments" purchase_payment_id=${row?.id} total_amount="${row["total_amount"]}" total_quantity="${row["total_quantity"] || row["total_adjusted_quantity"]}" total_adjusted_quantity="${row["total_adjusted_quantity"]}" total_adjusted_price="${row["total_adjusted_price"]}" aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to view this payment"></i>`;
              },
            },
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa fa-pen-to-square edit editPayment" purchase_payment_id=${row?.id} aria-hidden="true" style="font-size:15px;color:#f07b3f;${row["is_last_payment"] ? "" : "display:none"}" data-toggle="tooltip" data-placement="top" title="Click this button to edit this payment"></i>`;
              },
            },
            {
              targets: [2],
              className: "text-left",
              render: function (data, type, row) {
                return `<i class="fa fa-trash del delPayment" purchase_payment_id='${row["id"]}' aria-hidden="true" style="font-size:15px;color:#f07b3f" data-toggle="tooltip" data-placement="top" title="Click this button to delete this Payment"></i>`;
              },
            },
            {
              targets: [4],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(row["payment_date"]);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];

                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return `<span payment_date="${row["payment_date"]}">${day + "-" + month + "-" + date.getFullYear()}</span>`;
              },
            },
            {
              targets: [5],
              className: "text-left",
              render: function (data, type, row) {
                return `<span supplier_master_id=${row["supplier_master_id"]} email="${row["SupplierMaster"]?.email}" phone="${row["SupplierMaster"]?.phone}" address="${row["SupplierMaster"]?.address}" representative="${row["SupplierMaster"]?.representative}">${data}</span>`;
              },
            },
            {
              targets: [6],
              className: "text-left",
              render: function (data, type, row) {
                return `<span procurement_lot_id=${row["procurement_lot_id"]} created_at="${row["ProcurementLot"]?.created_at}">${data}</span>`;
              },
            },
            {
              targets: [7],
              className: "text-left",
              render: function (data, type, row) {
                return data || 0;
              },
            },
            {
              targets: [9],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(data["total_amount"] || 0).toFixed(2);
              },
            },
            {
              targets: [10, 11, 12, 13, 14, 15],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(data || 0).toFixed(2);
              },
            },
          ],
          // "infoCallback": function (settings, start, end, max, total, pre) {
          //   return start + " to " + end;
          // }
        });
      }

      $(document).on("click", ".viewPayments", async (e) => {
        // Changing panel input fields data
        $("#closePaymentPanelBtn").click();

        const purchase_payment_id = $(e.target).attr("purchase_payment_id");

        const supplier_master_id = $(e.target)
          .closest("tr")
          .children("td")
          .eq(5)
          .find("span")
          .attr("supplier_master_id");

        // Suppliers
        $("#view_payment_supplier_master_id").text(supplier_master_id);

        $("#view_payment_supplier_name").text(
          $(e.target).closest("tr").children("td").eq(5).text()
        );

        $("#view_payment_supplier_email").text(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(5)
            .find("span")
            .attr("email")
        );

        $("#view_payment_supplier_phone").text(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(5)
            .find("span")
            .attr("phone")
        );

        $("#view_payment_supplier_address").text(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(5)
            .find("span")
            .attr("address")
        );

        // Purchase Order
        $("#view_purchase_order_id").text(
          $(e.target)
            .closest("tr")
            .children("td")
            .eq(6)
            .find("span")
            .attr("procurement_lot_id")
        );

        $("#view_payment_lot_no").text(
          $(e.target).closest("tr").children("td").eq(6).text()
        );

        $("#view_payment_total_products").text(
          $(e.target).closest("tr").children("td").eq(7).text()
        );

        $("#view_total_amount").text(
          parseFloat(
            $(e.target)
              .closest("tr")
              .children("td")
              .eq(0)
              .find("i")
              .attr("total_amount")
          ).toFixed(2)
        );

        $("#view_total_quantity").text(
          parseFloat(
            $(e.target)
              .closest("tr")
              .children("td")
              .eq(0)
              .find("i")
              .attr("total_quantity")
          ).toFixed(2)
        );

        $("#view_payment_purchase_date").text(
          formatDateTime(
            new Date(
              $(e.target)
                .closest("tr")
                .children("td")
                .eq(6)
                .find("span")
                .attr("created_at")
            )
          )
        );

        // Payment Information
        $("#view_supplier_payment_id").text(purchase_payment_id);

        $("#view_transaction_id").text(
          $(e.target).closest("tr").children("td").eq(3).text()
        );

        $("#view_payment_date").text(
          $(e.target).closest("tr").children("td").eq(4).text()
        );

        $("#view_payment_method").text(
          $(e.target).closest("tr").children("td").eq(8).text()
        );

        $("#view_total_paid").text(
          $(e.target).closest("tr").children("td").eq(10).text()
        );

        $("#view_due_amount").text(
          $(e.target).closest("tr").children("td").eq(11).text()
        );

        $("#view_discount").text(
          $(e.target).closest("tr").children("td").eq(12).text()
        );

        $("#view_penalty").text(
          $(e.target).closest("tr").children("td").eq(13).text()
        );

        $("#view_tax_paid").text(
          $(e.target).closest("tr").children("td").eq(14).text()
        );

        $("#view_net_amount").text(
          $(e.target).closest("tr").children("td").eq(15).text()
        );

        $("#view_payment_date").text(
          formatDateTime(
            new Date(
              $(e.target)
                .closest("tr")
                .children("td")
                .eq(4)
                .find("span")
                .attr("payment_date")
            )
          )
        );

        // Opening Slied Panel
        $("#paymentProductModal").modal("show");

        loadPaymentProductTableData(purchase_payment_id, supplier_master_id);
      });

      $(document).on("click", ".editPayment", (e) => {
        $("#transaction_id").val(
          $(e.target).closest("tr").children("td").eq(3).text()
        );

        const paidDateTime = $(e.target)
          .closest("tr")
          .children("td")
          .eq(4)
          .find("span")
          .attr("payment_date");

        $("#payment_date").val(
          paidDateTime.split(":")[0] + ":" + paidDateTime.split(":")[1]
        );

        selected_payment_lot_id = $(e.target)
          .closest("tr")
          .children("td")
          .eq(6)
          .find("span")
          .attr("procurement_lot_id");

        selected_payment_lot_no = $(e.target)
          .closest("tr")
          .children("td")
          .eq(6)
          .find("span")
          .text();

        view_purchase_payment_id = $(e.target).attr("purchase_payment_id");

        selected_payment_supplier_id = $(e.target)
          .closest("tr")
          .children("td")
          .eq(5)
          .find("span")
          .attr("supplier_master_id");

        selected_payment_supplier_name = $(e.target)
          .closest("tr")
          .children("td")
          .eq(5)
          .find("span")
          .text();

        $("#paymentMethods")
          .val($(e.target).closest("tr").children("td").eq(8).text())
          .trigger("change");

        $("#total_paid").val(
          $(e.target).closest("tr").children("td").eq(10).text()
        );

        $("#payment_discount").val(
          $(e.target).closest("tr").children("td").eq(12).text()
        );

        $("#penalty").val(
          $(e.target).closest("tr").children("td").eq(13).text()
        );

        $("#tax_amount").val(
          $(e.target).closest("tr").children("td").eq(14).text()
        );

        // Opening Slied Panel
        $("#openPaymentPanelBtn").click();

        // Changing panel heading
        $("#paymentPanelHeading").text("Edit Payment Data");

        // Changing panel button label
        $("#submitPayment").text("Update");

        // Changing panel button attribute
        $("#submitPayment").attr(
          "purchase_payment_id",
          view_purchase_payment_id
        );

        $("#paymentProductModal").modal("hide");
      });

      $(document).on("click", ".delPayment", (e) => {
        let purchase_payment_id = $(e.target).attr("purchase_payment_id");
        let currentRow = $(e.target).closest("tr");
        $.confirm({
          title: "Delete Payment Detail?",
          content: "Are you sure, do you want to remove this Payment?",
          backgroundDismiss: false,
          backgroundDismissAnimation: "glow",
          type: "red",
          closeIcon: true,
          closeIconClass: "fa fa-close",
          typeAnimated: true,
          boxWidth: "30%",
          useBootstrap: false,
          autoClose: "no|5000",
          buttons: {
            delete: {
              text: "Delete",
              btnClass: "btn-red",
              action: function () {
                $.ajax({
                  url:
                    "/api/v1/purchase/payment?purchase_payment_id=" +
                    purchase_payment_id,
                  method: "delete",
                })
                  .done(function (response) {
                    //loading data to table
                    loadPaymentTableData();

                    toastr.success(
                      "Payment detail deleted successfully",
                      "Deleted"
                    );
                  })
                  .fail(function () {
                    toastr.error("Payment detail failed to delete!", "Error");
                  });
              },
            },
            no: function () {
              toastr.info("Payment detail is safe now", "Info");
            },
          },
        });
      });

      function loadPaymentProductTableData(
        purchase_payment_id,
        supplier_master_id
      ) {
        if (!purchase_payment_id) {
          return toastr["warning"]("Payment ID should not be empty!");
        }

        if (!supplier_master_id) {
          return toastr["warning"]("Supplier ID should not be empty!");
        }
        $("#paymentProductTable").DataTable({
          // searching: true,
          destroy: true,
          responsive: false,
          processing: true,
          serverSide: true,
          scrollX: true,
          scrollCollapse: true,
          scrollY: "40vh",
          ordering: false,
          ajax: {
            type: "GET",
            url: `/api/v1/procurement/product/payment/items?purchase_payment_id=${purchase_payment_id}&supplier_master_id=${supplier_master_id}`,
            error: function (xhr, error, code) {
              $("#paymentProductTable").DataTable().destroy();
              $("#paymentProductTable").DataTable({
                scrollX: true,
                ordering: false,
              });

              if (xhr["status"] == 420) {
                toastr["warning"](xhr["responseJSON"]["message"]);
              } else {
                toastr["error"](xhr["responseJSON"]["message"]);
              }
            },
            dataSrc: function (json) {
              json.iTotalRecords = json.data?.rows?.length;
              json.iTotalDisplayRecords = json.data?.count;

              // Return the data to be displayed in the DataTable
              return json?.data?.rows;
            },
          },
          columns: [
            { data: "pl.procurement_date" },
            { data: "ProductMaster.product_name" },
            { data: "procurement_product_type" },
            { data: "procurement_quantity" },
            { data: "procurement_price" },
            { data: "procurement_totalamount" },
            { data: "procurement_purchaser" },
          ],
          columnDefs: [
            {
              targets: [0],
              className: "text-left",
              render: function (data, type, row) {
                const date = new Date(row["pl"]["procurement_date"]);

                var months = [
                  "Jan",
                  "Feb",
                  "Mar",
                  "Apr",
                  "May",
                  "Jun",
                  "Jul",
                  "Aug",
                  "Sep",
                  "Oct",
                  "Nov",
                  "Dec",
                ];

                var month = months[date.getMonth()];
                var day = date.getDate().toString().padStart(2, "0"); // Ensure day is always two digits
                return day + "-" + month + "-" + date.getFullYear();
              },
            },
            {
              targets: [1],
              className: "text-left",
              render: function (data, type, row) {
                if (row["procurement_product_type"] == "UNPROCESSED") {
                  data = data.replaceAll("-WHOLE", "");
                }

                return `<span product_master_id=${row["ProductMaster"]?.id}>${data}</span>`;
              },
            },
            {
              targets: [3, 4, 5],
              className: "text-left",
              render: function (data, type, row) {
                return parseFloat(data || 0).toFixed(2);
              },
            },
          ],
          drawCallback: () => {},
        });
      }

      function loadPaymentSuppliers() {
        // Load Suppliers
        $("#paymentSupplierNames").empty();

        $("#paymentSupplierNames").select2({
          placeholder: "Choose a supplier",
          allowClear: true,
          ajax: {
            url: "/api/v1/master/supplier",
            data: (params) => {
              params.page = params.page || 1;
              params.length = 25;
              params.start = (params.page - 1) * params.length;

              let query = {
                dropdownSearch: params.term,
                start: params.start,
                length: params.length,
              };

              // Query parameters will be ?search=[term]&page=[page]
              return query;
            },
            processResults: (data, params) => {
              return {
                results: $.map(data?.data?.rows, (item) => {
                  return {
                    id: item.id,
                    text: item.supplier_name,
                  };
                }),
                pagination: {
                  more: params.page * params.length < data?.data?.count,
                },
              };
            },
          },
          data:
            selected_payment_supplier_id && selected_payment_supplier_name
              ? [
                  {
                    id: selected_payment_supplier_id,
                    text: selected_payment_supplier_name,
                  },
                ]
              : [],
        });

        if (selected_payment_supplier_id) {
          // Clearing selected value
          $("#paymentSupplierNames").change();
        }
      }

      $(document).on("change", "#paymentSupplierNames", (e) => {
        const supplier_master_id = $(e.target).val();
        $("#paymentLotNo").empty();

        if (supplier_master_id) {
          loadPaymentLotNo(supplier_master_id);
        }
      });

      async function loadPaymentLotNo(supplier_master_id) {
        $("#paymentLotNo").empty();

        if (!supplier_master_id) {
          return toastr["warning"]("Supplier ID must not be empty");
        }

        let selectedData = [];

        if (selected_payment_lot_id) {
          let result = await getPaymentLotNo(supplier_master_id);
          if (result) {
            selectedData.push(result);
          }
        }

        $("#paymentLotNo").select2({
          placeholder: "Choose a lot no",
          allowClear: true,
          ajax: {
            url: `/api/v1/procurement/lot/lots/payment?supplier_master_id=${supplier_master_id}&purchase_payment_id=${view_purchase_payment_id}`,
            data: (params) => {
              params.page = params.page || 1;
              params.length = 25;
              params.start = (params.page - 1) * params.length;

              let query = {
                dropdownSearch: params.term,
                start: params.start,
                length: params.length,
              };

              // Query parameters will be ?search=[term]&page=[page]
              return query;
            },
            processResults: (data, params) => {
              return {
                results: $.map(data?.data, (item) => {
                  return {
                    id: item.id,
                    text: item.procurement_lot,
                    total_amount:
                      parseFloat(item?.total_amount) -
                      parseFloat(item?.total_paid || 0) -
                      parseFloat(item?.total_discount || 0),
                    total_discount: parseFloat(item?.total_discount),
                    total_paid: item?.total_paid,
                    is_due:
                      parseFloat(item?.total_paid || 0) > 0 ? true : false,
                  };
                }),
                pagination: {
                  more: params.page * params.length < data?.data?.count,
                },
              };
            },
          },
          data: selectedData,
        });

        if (selectedData.length > 0) {
          $("#paymentLotNo").change();
        }
      }

      function getPaymentLotNo(supplier_master_id) {
        return new Promise((resolve, reject) => {
          $.ajax({
            url: `/api/v1/procurement/lot/lots/payment?procurement_lot_id=${selected_payment_lot_id}&supplier_master_id=${supplier_master_id}&purchase_payment_id=${view_purchase_payment_id}`,
            method: "GET",
            dataType: "json",
            contentType: "application/json",
            crossDomain: true,
            processData: false,
            success: (data) => {
              resolve({
                id: data?.data[0].id,
                text: data?.data[0].procurement_lot,
                total_amount:
                  parseFloat(data?.data[0]?.total_amount) -
                  parseFloat(data?.data[0]?.total_paid || 0) -
                  parseFloat(data?.data[0]?.total_discount || 0),
                total_discount: parseFloat(data?.data[0]?.total_discount),
                total_paid: data?.data[0]?.total_paid,
                is_due:
                  parseFloat(data?.data[0]?.total_paid || 0) > 0 ? true : false,
              });
            },
            error: (jqXhr, textStatus, errorThrown) => {
              if (jqXhr["status"] == 420) {
                toastr["warning"](jqXhr["responseJSON"]["message"]);
              } else {
                toastr["error"](jqXhr["responseJSON"]["message"]);
              }
              reject();
            },
          });
        });
      }

      $(document).on("change", "#paymentLotNo", (e) => {
        if ($(e.target).val()) {
          const total_amount = $(e.target).select2("data")?.[0]?.total_amount;
          const is_due = $(e.target).select2("data")?.[0]?.is_due;

          $("#total_amount_paid").text(
            is_due ? "Total Due :" : "Total Amount :"
          );
          $("#total_payment_amount").text(total_amount || "0.00");
        }
        $("#payment_discount").keyup();
      });

      $(document).on("keyup", "#payment_discount", (e) => {
        const discount = parseFloat($(e.target).val());

        const total_amount = parseFloat($("#total_payment_amount").text());

        if ($("#paymentLotNo").val()) {
          const is_due = $("#paymentLotNo").select2("data")?.[0]?.is_due;

          $("#total_amount_paid").text(
            is_due ? "Total Due :" : "Total Amount :"
          );
        }

        if (discount > 0 && total_amount > 0) {
          $("#total_payment_amount").text(
            total_amount +
              " (-" +
              discount +
              ") = " +
              (total_amount - discount) || "0.00"
          );
        } else {
          $("#total_payment_amount").text(total_amount || "0.00");
        }

        calculateTotalPaid();
      });

      $(document).on("keyup", "#total_paid", (e) => {
        const payment_discount = parseFloat($("#payment_discount").val() || 0);

        const total_amount =
          parseFloat($("#paymentLotNo").select2("data")?.[0]?.total_amount) -
          payment_discount;

        calculateTotalPaid();
      });

      $(document).on("keyup", "#penalty", (e) => {
        calculateTotalPaid();
      });

      $(document).on("keyup", "#tax_amount", (e) => {
        calculateTotalPaid();
      });

      function calculateTotalPaid() {
        return new Promise((resolve, reject) => {
          const payment_discount = parseFloat(
            $("#payment_discount").val() || 0
          );

          const total_amount = $("#paymentLotNo").val()
            ? parseFloat(
                $("#paymentLotNo").select2("data")?.[0]?.total_amount
              ) - payment_discount
            : 0;

          const total_paid = parseFloat($("#total_paid").val() || 0);
          const penalty = parseFloat($("#penalty").val() || 0);
          const tax_amount = parseFloat($("#tax_amount").val() || 0);
          const due_amount = total_amount - total_paid || 0;
          let net_amount = 0;

          if (total_amount > 0 && total_paid > 0) {
            net_amount = total_paid + penalty + tax_amount;
            $("#net_amount").text(net_amount?.toFixed(2));
            $("#due_amount").text(due_amount?.toFixed(2));
          } else {
            $("#net_amount").text("0.00");
            $("#due_amount").text("0.00");
          }

          if (due_amount < 0) {
            toastr["warning"](
              "Paid amount should not be greater than the total amount"
            );
            return reject();
          }

          return resolve({ net_amount, due_amount });
        });
      }

      function loadPaymentMethods() {
        $("#paymentMethods").select2({
          placeholder: "Choose a type",
          allowClear: "true",
          data: [
            {
              id: "Credit card",
              text: "Credit card",
            },
            {
              id: "Debit card",
              text: "Debit card",
            },
            {
              id: "Digital wallet",
              text: "Digital wallet",
            },
            {
              id: "Direct debit",
              text: "Direct debit",
            },
            {
              id: "Cryptocurrency",
              text: "Cryptocurrency",
            },
            {
              id: "Cash",
              text: "Cash",
            },
            {
              id: "Bank transfer",
              text: "Bank transfer",
            },
            {
              id: "International ACH",
              text: "International ACH",
            },
          ],
        });

        $("#paymentMethods").val(null).trigger("change");
      }

      async function savePayment() {
        const purchase_payment_id = $("#submitPayment").attr(
          "purchase_payment_id"
        );

        let { net_amount, due_amount } = await calculateTotalPaid();

        if (net_amount <= 0) {
          return toastr["warning"]("Net amount should not be empty!");
        }

        let url = "/api/v1/purchase/payment";
        let method = "POST";
        let input_params = {
          transaction_id: $("#transaction_id").val(),
          payment_date: $("#payment_date").val(),
          supplier_master_id: $("#paymentSupplierNames").val(),
          procurement_lot_id: $("#paymentLotNo").val(),
          payment_method: $("#paymentMethods").val(),
          discount: $("#payment_discount").val() || 0,
          total_paid: $("#total_paid").val(),
          penalty: $("#penalty").val() || 0,
          tax_amount: $("#tax_amount").val() || 0,
          net_amount,
          due_amount,
        };

        if (purchase_payment_id) {
          url = "/api/v1/purchase/payment";
          method = "PUT";
          input_params = {
            purchase_payment_id,
            purchase_payment_data: {
              purchase_payment_id,
              ...input_params,
            },
          };
        }

        $.ajax({
          url,
          method,
          dataType: "json",
          contentType: "application/json",
          data: JSON.stringify(input_params),
          crossDomain: true,
          processData: false,
          success: (data) => {
            toastr["success"](data?.message);

            $("#closePaymentPanelBtn").click();

            loadPaymentTableData();

            resetAllInputs();
          },
          error: (jqXhr, textStatus, errorThrown) => {
            if (jqXhr["status"] == 420) {
              toastr["warning"](jqXhr["responseJSON"]["message"]);
            } else {
              toastr["error"](jqXhr["responseJSON"]["message"]);
            }
          },
        });
      }

      $("#resetPaymentDataBtn").on("click", resetAllInputs);
    });
  </script>
</html>
